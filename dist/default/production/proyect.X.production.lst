

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Thu May 15 20:18:45 2025

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	pa_nodes0,global,class=CODE,delta=1
    27  0000                     
    28                           ; Version 1.41
    29                           ; Generated 25/01/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     prodl	equ	0xFF3
    63                           wreg	equ	0xFE8
    64                           postinc1	equ	0xFE6
    65                           plusw1	equ	0xFE3
    66                           fsr1h	equ	0xFE2
    67                           fsr1l	equ	0xFE1
    68                           indf2	equ	0xFDF
    69                           postinc2	equ	0xFDE
    70                           plusw2	equ	0xFDB
    71                           fsr2h	equ	0xFDA
    72                           fsr2l	equ	0xFD9
    73                           
    74                           	psect	idataCOMRAM
    75  007C2B                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for main@F3898
    79  007C2B  A1                 	db	161
    80  007C2C  A1                 	db	161
    81  007C2D  A1                 	db	161
    82  007C2E  A1                 	db	161
    83  007C2F  A1                 	db	161
    84  0000                     _ADCON0bits	set	4034
    85  0000                     _PORTBbits	set	3969
    86  0000                     _SSPBUF	set	4041
    87  0000                     _LATAbits	set	3977
    88  0000                     _TRISAbits	set	3986
    89  0000                     _ADCON1	set	4033
    90  0000                     _PIR1bits	set	3998
    91  0000                     _IPR1bits	set	3999
    92  0000                     _PIE1bits	set	3997
    93  0000                     _SSPSTATbits	set	4039
    94  0000                     _SSPCON1bits	set	4038
    95  0000                     _SSPCON1	set	4038
    96  0000                     _TRISCbits	set	3988
    97  0000                     _TRISBbits	set	3987
    98                           
    99                           ; #config settings
   100  0000                     prodl	equ	0xFF3
   101                           wreg	equ	0xFE8
   102                           postinc1	equ	0xFE6
   103                           plusw1	equ	0xFE3
   104                           fsr1h	equ	0xFE2
   105                           fsr1l	equ	0xFE1
   106                           indf2	equ	0xFDF
   107                           postinc2	equ	0xFDE
   108                           plusw2	equ	0xFDB
   109                           fsr2h	equ	0xFDA
   110                           fsr2l	equ	0xFD9
   111                           
   112                           	psect	cinit
   113  007CAC                     __pcinit:
   114                           	opt stack 0
   115  007CAC                     start_initialization:
   116                           	opt stack 0
   117  007CAC                     __initialization:
   118                           	opt stack 0
   119                           
   120                           ; Initialize objects allocated to COMRAM (5 bytes)
   121                           ; load TBLPTR registers with __pidataCOMRAM
   122  007CAC  0E2B               	movlw	low __pidataCOMRAM
   123  007CAE  6EF6               	movwf	tblptrl,c
   124  007CB0  0E7C               	movlw	high __pidataCOMRAM
   125  007CB2  6EF7               	movwf	tblptrh,c
   126  007CB4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   127  007CB6  6EF8               	movwf	tblptru,c
   128  007CB8  EE00  F028         	lfsr	0,__pdataCOMRAM
   129  007CBC  EE10 F005          	lfsr	1,5
   130  007CC0                     copy_data0:
   131  007CC0  0009               	tblrd		*+
   132  007CC2  CFF5 FFEE          	movff	tablat,postinc0
   133  007CC6  50E5               	movf	postdec1,w,c
   134  007CC8  50E1               	movf	fsr1l,w,c
   135  007CCA  E1FA               	bnz	copy_data0
   136  007CCC                     end_of_initialization:
   137                           	opt stack 0
   138  007CCC                     __end_of__initialization:
   139                           	opt stack 0
   140  007CCC  0100               	movlb	0
   141  007CCE  EF39  F03F         	goto	_main	;jump to C main() function
   142                           tblptru	equ	0xFF8
   143                           tblptrh	equ	0xFF7
   144                           tblptrl	equ	0xFF6
   145                           tablat	equ	0xFF5
   146                           prodl	equ	0xFF3
   147                           postinc0	equ	0xFEE
   148                           wreg	equ	0xFE8
   149                           postinc1	equ	0xFE6
   150                           postdec1	equ	0xFE5
   151                           plusw1	equ	0xFE3
   152                           fsr1h	equ	0xFE2
   153                           fsr1l	equ	0xFE1
   154                           indf2	equ	0xFDF
   155                           postinc2	equ	0xFDE
   156                           plusw2	equ	0xFDB
   157                           fsr2h	equ	0xFDA
   158                           fsr2l	equ	0xFD9
   159                           
   160                           	psect	dataCOMRAM
   161  000028                     __pdataCOMRAM:
   162                           	opt stack 0
   163  000028                     main@F3898:
   164                           	opt stack 0
   165  000028                     	ds	5
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           prodl	equ	0xFF3
   171                           postinc0	equ	0xFEE
   172                           wreg	equ	0xFE8
   173                           postinc1	equ	0xFE6
   174                           postdec1	equ	0xFE5
   175                           plusw1	equ	0xFE3
   176                           fsr1h	equ	0xFE2
   177                           fsr1l	equ	0xFE1
   178                           indf2	equ	0xFDF
   179                           postinc2	equ	0xFDE
   180                           plusw2	equ	0xFDB
   181                           fsr2h	equ	0xFDA
   182                           fsr2l	equ	0xFD9
   183                           
   184                           	psect	cstackCOMRAM
   185  000001                     __pcstackCOMRAM:
   186                           	opt stack 0
   187  000001                     SPI_Start@Clock_Frequency:
   188                           	opt stack 0
   189  000001                     SPI_Transfer@byte_to_send:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0x0
   193  000001                     	ds	1
   194  000002                     Read_nRF24L01_Register@Register_Address:
   195                           	opt stack 0
   196  000002                     Read_nRF24L01_Status@nRF24L01_Status:
   197                           	opt stack 0
   198  000002                     Write_nRF24L01_Status@Register_Content:
   199                           	opt stack 0
   200  000002                     Read_nRF24L01_Address_Register@Register_Address:
   201                           	opt stack 0
   202  000002                     Write_nRF24L01_TX_Payload@TX_RX_Payload_Width:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0x1
   206  000002                     	ds	1
   207  000003                     Read_nRF24L01_Register@Register_Content:
   208                           	opt stack 0
   209  000003                     Read_nRF24L01_Address_Register@Register_Content:
   210                           	opt stack 0
   211  000003                     Write_nRF24L01_TX_Payload@TX_Payload:
   212                           	opt stack 0
   213                           
   214                           ; 1 bytes @ 0x2
   215  000003                     	ds	1
   216  000004                     ??_Read_nRF24L01_Address_Register:
   217  000004                     Write_nRF24L01_Register@Register_Content:
   218                           	opt stack 0
   219  000004                     Write_nRF24L01_TX_Payload@TX_Checksum:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x3
   223  000004                     	ds	1
   224  000005                     Write_nRF24L01_Register@Register_Address:
   225                           	opt stack 0
   226  000005                     Write_nRF24L01_TX_Payload@Enable_Checksum:
   227                           	opt stack 0
   228                           
   229                           ; 1 bytes @ 0x4
   230  000005                     	ds	1
   231  000006                     Write_nRF24L01_TX_Payload@i:
   232                           	opt stack 0
   233  000006                     Start_TX_Mode_nRF24L01@Frequency_Channel:
   234                           	opt stack 0
   235  000006                     Check_Data_Sent_TX_Mode_nRF24L01@i:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x5
   239  000006                     	ds	1
   240  000007                     Start_TX_Mode_nRF24L01@RF_Data_Rate:
   241                           	opt stack 0
   242                           
   243                           ; 1 bytes @ 0x6
   244  000007                     	ds	1
   245  000008                     Start_TX_Mode_nRF24L01@RF_Output_Power:
   246                           	opt stack 0
   247  000008                     Check_Data_Sent_TX_Mode_nRF24L01@j:
   248                           	opt stack 0
   249                           
   250                           ; 1 bytes @ 0x7
   251  000008                     	ds	1
   252  000009                     Read_nRF24L01_Address_Register@TX_RX_Address_Width:
   253                           	opt stack 0
   254  000009                     Start_TX_Mode_nRF24L01@LNA_Gain:
   255                           	opt stack 0
   256  000009                     Check_Data_Sent_TX_Mode_nRF24L01@nRF24L01_Status:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x8
   260  000009                     	ds	1
   261  00000A                     Read_nRF24L01_Address_Register@i:
   262                           	opt stack 0
   263  00000A                     Start_TX_Mode_nRF24L01@CRC_Setup:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0x9
   267  00000A                     	ds	1
   268  00000B                     Write_nRF24L01_Address_Register@Register_Address:
   269                           	opt stack 0
   270  00000B                     Start_TX_Mode_nRF24L01@Auto_Retransmit_Delay:
   271                           	opt stack 0
   272                           
   273                           ; 1 bytes @ 0xA
   274  00000B                     	ds	1
   275  00000C                     Write_nRF24L01_Address_Register@Register_Content:
   276                           	opt stack 0
   277  00000C                     Start_TX_Mode_nRF24L01@Max_Auto_Retransmit:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0xB
   281  00000C                     	ds	1
   282  00000D                     ??_Write_nRF24L01_Address_Register:
   283  00000D                     Start_TX_Mode_nRF24L01@Enable_Checksum:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0xC
   287  00000D                     	ds	1
   288  00000E                     Start_TX_Mode_nRF24L01@TX_RX_Payload_Width:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0xD
   292  00000E                     	ds	1
   293  00000F                     ??_Start_TX_Mode_nRF24L01:
   294                           
   295                           ; 1 bytes @ 0xE
   296  00000F                     	ds	1
   297  000010                     Start_TX_Mode_nRF24L01@TX_RX_Address_Width:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0xF
   301  000010                     	ds	2
   302  000012                     Write_nRF24L01_Address_Register@Address_Verification:
   303                           	opt stack 0
   304                           
   305                           ; 5 bytes @ 0x11
   306  000012                     	ds	5
   307  000017                     Write_nRF24L01_Address_Register@Process_Finished:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x16
   311  000017                     	ds	1
   312  000018                     Write_nRF24L01_Address_Register@TX_RX_Address_Width:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x17
   316  000018                     	ds	1
   317  000019                     Write_nRF24L01_Address_Register@i:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0x18
   321  000019                     	ds	1
   322  00001A                     Send_Data_TX_Mode_nRF24L01@TX_RX_Address_Width:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x19
   326  00001A                     	ds	1
   327  00001B                     Send_Data_TX_Mode_nRF24L01@TX_Address:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x1A
   331  00001B                     	ds	1
   332  00001C                     Send_Data_TX_Mode_nRF24L01@TX_RX_Payload_Width:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x1B
   336  00001C                     	ds	1
   337  00001D                     Send_Data_TX_Mode_nRF24L01@TX_Payload:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x1C
   341  00001D                     	ds	1
   342  00001E                     Send_Data_TX_Mode_nRF24L01@Enable_Checksum:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x1D
   346  00001E                     	ds	1
   347  00001F                     ??_main:
   348                           
   349                           ; 1 bytes @ 0x1E
   350  00001F                     	ds	2
   351  000021                     main@direccion_tx:
   352                           	opt stack 0
   353                           
   354                           ; 5 bytes @ 0x20
   355  000021                     	ds	5
   356  000026                     main@estado:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x25
   360  000026                     	ds	1
   361  000027                     main@mensaje:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x26
   365  000027                     	ds	1
   366                           tblptru	equ	0xFF8
   367                           tblptrh	equ	0xFF7
   368                           tblptrl	equ	0xFF6
   369                           tablat	equ	0xFF5
   370                           prodl	equ	0xFF3
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           postinc1	equ	0xFE6
   374                           postdec1	equ	0xFE5
   375                           plusw1	equ	0xFE3
   376                           fsr1h	equ	0xFE2
   377                           fsr1l	equ	0xFE1
   378                           indf2	equ	0xFDF
   379                           postinc2	equ	0xFDE
   380                           plusw2	equ	0xFDB
   381                           fsr2h	equ	0xFDA
   382                           fsr2l	equ	0xFD9
   383                           
   384 ;;
   385 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   386 ;;
   387 ;; *************** function _main *****************
   388 ;; Defined at:
   389 ;;		line 6 in file "main.c"
   390 ;; Parameters:    Size  Location     Type
   391 ;;		None
   392 ;; Auto vars:     Size  Location     Type
   393 ;;  direccion_tx    5   32[COMRAM] unsigned char [5]
   394 ;;  mensaje         1   38[COMRAM] unsigned char [1]
   395 ;;  estado          1   37[COMRAM] unsigned char 
   396 ;; Return value:  Size  Location     Type
   397 ;;                  1    wreg      void 
   398 ;; Registers used:
   399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   400 ;; Tracked objects:
   401 ;;		On entry : 0/0
   402 ;;		On exit  : 0/0
   403 ;;		Unchanged: 0/0
   404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   405 ;;      Params:         0       0       0       0       0       0       0       0       0
   406 ;;      Locals:         7       0       0       0       0       0       0       0       0
   407 ;;      Temps:          2       0       0       0       0       0       0       0       0
   408 ;;      Totals:         9       0       0       0       0       0       0       0       0
   409 ;;Total ram usage:        9 bytes
   410 ;; Hardware stack levels required when called:    4
   411 ;; This function calls:
   412 ;;		_Check_Data_Sent_TX_Mode_nRF24L01
   413 ;;		_SPI_Start
   414 ;;		_Send_Data_TX_Mode_nRF24L01
   415 ;;		_Start_TX_Mode_nRF24L01
   416 ;;		_nRF24L01_Ports_Start
   417 ;; This function is called by:
   418 ;;		Startup code after reset
   419 ;; This function uses a non-reentrant model
   420 ;;
   421                           
   422                           	psect	text0
   423  007E72                     __ptext0:
   424                           	opt stack 0
   425  007E72                     _main:
   426                           	opt stack 27
   427                           
   428                           ;main.c: 8: unsigned char direccion_tx[5] = {0xA1, 0xA1, 0xA1, 0xA1, 0xA1};
   429                           
   430                           ;incstack = 0
   431  007E72  EE20  F028         	lfsr	2,main@F3898
   432  007E76  EE10  F021         	lfsr	1,main@direccion_tx
   433  007E7A  0E04               	movlw	4
   434  007E7C                     u291:
   435  007E7C  CFDB FFE3          	movff	plusw2,plusw1
   436  007E80  06E8               	decf	wreg,f,c
   437  007E82  E2FC               	bc	u291
   438                           
   439                           ;main.c: 9: unsigned char mensaje[1];
   440                           ;main.c: 10: unsigned char estado = 0;
   441  007E84  6A26               	clrf	main@estado,c
   442                           
   443                           ;main.c: 12: ADCON0bits.ADON = 0;
   444  007E86  90C2               	bcf	4034,0,c	;volatile
   445                           
   446                           ;main.c: 14: SPI_Start(0b01);
   447  007E88  0E01               	movlw	1
   448  007E8A  EC46  F03E         	call	_SPI_Start
   449                           
   450                           ;main.c: 15: nRF24L01_Ports_Start();
   451  007E8E  EC28  F03E         	call	_nRF24L01_Ports_Start	;wreg free
   452                           
   453                           ;main.c: 16: Start_TX_Mode_nRF24L01(0b11, 0x01, 0, 0b11, 1, 1, 0x00, 10, 0, 1);
   454  007E92  0E01               	movlw	1
   455  007E94  6E06               	movwf	Start_TX_Mode_nRF24L01@Frequency_Channel,c
   456  007E96  6A07               	clrf	Start_TX_Mode_nRF24L01@RF_Data_Rate,c
   457  007E98  0E03               	movlw	3
   458  007E9A  6E08               	movwf	Start_TX_Mode_nRF24L01@RF_Output_Power,c
   459  007E9C  0E01               	movlw	1
   460  007E9E  6E09               	movwf	Start_TX_Mode_nRF24L01@LNA_Gain,c
   461  007EA0  6E0A               	movwf	Start_TX_Mode_nRF24L01@CRC_Setup,c
   462  007EA2  6A0B               	clrf	Start_TX_Mode_nRF24L01@Auto_Retransmit_Delay,c
   463  007EA4  0E0A               	movlw	10
   464  007EA6  6E0C               	movwf	Start_TX_Mode_nRF24L01@Max_Auto_Retransmit,c
   465  007EA8  6A0D               	clrf	Start_TX_Mode_nRF24L01@Enable_Checksum,c
   466  007EAA  0E01               	movlw	1
   467  007EAC  6E0E               	movwf	Start_TX_Mode_nRF24L01@TX_RX_Payload_Width,c
   468  007EAE  0E03               	movlw	3
   469  007EB0  EC78  F03F         	call	_Start_TX_Mode_nRF24L01
   470  007EB4                     l1165:
   471                           
   472                           ;main.c: 19: {
   473                           ;main.c: 20: mensaje[0] = estado;
   474  007EB4  C026  F027         	movff	main@estado,main@mensaje
   475                           
   476                           ;main.c: 21: Send_Data_TX_Mode_nRF24L01(0, 0b11, direccion_tx, 1, mensaje);
   477  007EB8  0E03               	movlw	3
   478  007EBA  6E1A               	movwf	Send_Data_TX_Mode_nRF24L01@TX_RX_Address_Width,c
   479  007EBC  0E21               	movlw	low main@direccion_tx
   480  007EBE  6E1B               	movwf	Send_Data_TX_Mode_nRF24L01@TX_Address,c
   481  007EC0  0E01               	movlw	1
   482  007EC2  6E1C               	movwf	Send_Data_TX_Mode_nRF24L01@TX_RX_Payload_Width,c
   483  007EC4  0E27               	movlw	low main@mensaje
   484  007EC6  6E1D               	movwf	Send_Data_TX_Mode_nRF24L01@TX_Payload,c
   485  007EC8  0E00               	movlw	0
   486  007ECA  ECBD  F03E         	call	_Send_Data_TX_Mode_nRF24L01
   487                           
   488                           ;main.c: 22: Check_Data_Sent_TX_Mode_nRF24L01();
   489  007ECE  EC0D  F03F         	call	_Check_Data_Sent_TX_Mode_nRF24L01	;wreg free
   490                           
   491                           ;main.c: 24: estado ^= 0x01;
   492  007ED2  0E01               	movlw	1
   493  007ED4  1A26               	xorwf	main@estado,f,c
   494                           
   495                           ;main.c: 26: _delay((unsigned long)((500)*(48000000UL/4000.0)));
   496  007ED6  0E1F               	movlw	31
   497  007ED8  6E20               	movwf	(??_main+1)& (0+255),c
   498  007EDA  0E71               	movlw	113
   499  007EDC  6E1F               	movwf	??_main& (0+255),c
   500  007EDE  0E1E               	movlw	30
   501  007EE0                     u307:
   502  007EE0  2EE8               	decfsz	wreg,f,c
   503  007EE2  D7FE               	bra	u307
   504  007EE4  2E1F               	decfsz	??_main& (0+255),f,c
   505  007EE6  D7FC               	bra	u307
   506  007EE8  2E20               	decfsz	(??_main+1)& (0+255),f,c
   507  007EEA  D7FA               	bra	u307
   508  007EEC  D000               	nop2	
   509  007EEE  D7E2               	goto	l1165
   510  007EF0                     __end_of_main:
   511                           	opt stack 0
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           prodl	equ	0xFF3
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           postinc1	equ	0xFE6
   520                           postdec1	equ	0xFE5
   521                           plusw1	equ	0xFE3
   522                           fsr1h	equ	0xFE2
   523                           fsr1l	equ	0xFE1
   524                           indf2	equ	0xFDF
   525                           postinc2	equ	0xFDE
   526                           plusw2	equ	0xFDB
   527                           fsr2h	equ	0xFDA
   528                           fsr2l	equ	0xFD9
   529                           
   530 ;; *************** function _nRF24L01_Ports_Start *****************
   531 ;; Defined at:
   532 ;;		line 27 in file "nRF24l01.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;		None
   535 ;; Auto vars:     Size  Location     Type
   536 ;;		None
   537 ;; Return value:  Size  Location     Type
   538 ;;                  1    wreg      void 
   539 ;; Registers used:
   540 ;;		wreg, status,2
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   546 ;;      Params:         0       0       0       0       0       0       0       0       0
   547 ;;      Locals:         0       0       0       0       0       0       0       0       0
   548 ;;      Temps:          0       0       0       0       0       0       0       0       0
   549 ;;      Totals:         0       0       0       0       0       0       0       0       0
   550 ;;Total ram usage:        0 bytes
   551 ;; Hardware stack levels used:    1
   552 ;; This function calls:
   553 ;;		Nothing
   554 ;; This function is called by:
   555 ;;		_main
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           	psect	text1
   560  007C50                     __ptext1:
   561                           	opt stack 0
   562  007C50                     _nRF24L01_Ports_Start:
   563                           	opt stack 30
   564                           
   565                           ;nRF24l01.c: 29: ADCON1=0x0F;
   566                           
   567                           ;incstack = 0
   568  007C50  0E0F               	movlw	15
   569  007C52  6EC1               	movwf	4033,c	;volatile
   570                           
   571                           ;nRF24l01.c: 30: TRISAbits.TRISA2=0;
   572  007C54  9492               	bcf	3986,2,c	;volatile
   573                           
   574                           ;nRF24l01.c: 31: TRISAbits.TRISA3=0;
   575  007C56  9692               	bcf	3986,3,c	;volatile
   576                           
   577                           ;nRF24l01.c: 32: TRISBbits.TRISB2=1;
   578  007C58  8493               	bsf	3987,2,c	;volatile
   579                           
   580                           ;nRF24l01.c: 33: LATAbits.LATA3=1;
   581  007C5A  8689               	bsf	3977,3,c	;volatile
   582                           
   583                           ;nRF24l01.c: 34: LATAbits.LATA2=0;
   584  007C5C  9489               	bcf	3977,2,c	;volatile
   585  007C5E  0C0F               	retlw	15	;funcret
   586  007C60                     __end_of_nRF24L01_Ports_Start:
   587                           	opt stack 0
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           prodl	equ	0xFF3
   593                           postinc0	equ	0xFEE
   594                           wreg	equ	0xFE8
   595                           postinc1	equ	0xFE6
   596                           postdec1	equ	0xFE5
   597                           plusw1	equ	0xFE3
   598                           fsr1h	equ	0xFE2
   599                           fsr1l	equ	0xFE1
   600                           indf2	equ	0xFDF
   601                           postinc2	equ	0xFDE
   602                           plusw2	equ	0xFDB
   603                           fsr2h	equ	0xFDA
   604                           fsr2l	equ	0xFD9
   605                           
   606 ;; *************** function _Start_TX_Mode_nRF24L01 *****************
   607 ;; Defined at:
   608 ;;		line 284 in file "nRF24l01.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;  TX_RX_Addres    1    wreg     unsigned char 
   611 ;;  Frequency_Ch    1    5[COMRAM] unsigned char 
   612 ;;  RF_Data_Rate    1    6[COMRAM] unsigned char 
   613 ;;  RF_Output_Po    1    7[COMRAM] unsigned char 
   614 ;;  LNA_Gain        1    8[COMRAM] unsigned char 
   615 ;;  CRC_Setup       1    9[COMRAM] unsigned char 
   616 ;;  Auto_Retrans    1   10[COMRAM] unsigned char 
   617 ;;  Max_Auto_Ret    1   11[COMRAM] unsigned char 
   618 ;;  Enable_Check    1   12[COMRAM] unsigned char 
   619 ;;  TX_RX_Payloa    1   13[COMRAM] unsigned char 
   620 ;; Auto vars:     Size  Location     Type
   621 ;;  TX_RX_Addres    1   15[COMRAM] unsigned char 
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      void 
   624 ;; Registers used:
   625 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   631 ;;      Params:         9       0       0       0       0       0       0       0       0
   632 ;;      Locals:         1       0       0       0       0       0       0       0       0
   633 ;;      Temps:          1       0       0       0       0       0       0       0       0
   634 ;;      Totals:        11       0       0       0       0       0       0       0       0
   635 ;;Total ram usage:       11 bytes
   636 ;; Hardware stack levels used:    1
   637 ;; Hardware stack levels required when called:    3
   638 ;; This function calls:
   639 ;;		_Reset_nRF24L01_Status_and_nRF24L01_Payloads
   640 ;;		_Write_nRF24L01_Register
   641 ;; This function is called by:
   642 ;;		_main
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           	psect	text2
   647  007EF0                     __ptext2:
   648                           	opt stack 0
   649  007EF0                     _Start_TX_Mode_nRF24L01:
   650                           	opt stack 27
   651                           
   652                           ;incstack = 0
   653                           ;Start_TX_Mode_nRF24L01@TX_RX_Address_Width stored from wreg
   654  007EF0  6E10               	movwf	Start_TX_Mode_nRF24L01@TX_RX_Address_Width,c
   655                           
   656                           ;nRF24l01.c: 286: LATAbits.LATA2=0;
   657  007EF2  9489               	bcf	3977,2,c	;volatile
   658                           
   659                           ;nRF24l01.c: 287: Reset_nRF24L01_Status_and_nRF24L01_Payloads();
   660  007EF4  EC69  F03E         	call	_Reset_nRF24L01_Status_and_nRF24L01_Payloads	;wreg free
   661                           
   662                           ;nRF24l01.c: 289: Write_nRF24L01_Register (0x01, 0b00111111);
   663  007EF8  0E3F               	movlw	63
   664  007EFA  6E04               	movwf	Write_nRF24L01_Register@Register_Content,c
   665  007EFC  0E01               	movlw	1
   666  007EFE  EC7F  F03E         	call	_Write_nRF24L01_Register
   667                           
   668                           ;nRF24l01.c: 291: Write_nRF24L01_Register (0x02, 0b00111111);
   669  007F02  0E3F               	movlw	63
   670  007F04  6E04               	movwf	Write_nRF24L01_Register@Register_Content,c
   671  007F06  0E02               	movlw	2
   672  007F08  EC7F  F03E         	call	_Write_nRF24L01_Register
   673                           
   674                           ;nRF24l01.c: 293: Write_nRF24L01_Register (0x03, TX_RX_Address_Width);
   675  007F0C  C010  F004         	movff	Start_TX_Mode_nRF24L01@TX_RX_Address_Width,Write_nRF24L01_Register@Register_Conte
      +                          nt
   676  007F10  0E03               	movlw	3
   677  007F12  EC7F  F03E         	call	_Write_nRF24L01_Register
   678                           
   679                           ;nRF24l01.c: 295: Write_nRF24L01_Register (0x04, Auto_Retransmit_Delay*0b10000 +
   680                           ;nRF24l01.c: 296: Max_Auto_Retransmit);
   681  007F16  500B               	movf	Start_TX_Mode_nRF24L01@Auto_Retransmit_Delay,w,c
   682  007F18  0D10               	mullw	16
   683  007F1A  50F3               	movf	prodl,w,c
   684  007F1C  240C               	addwf	Start_TX_Mode_nRF24L01@Max_Auto_Retransmit,w,c
   685  007F1E  6E04               	movwf	Write_nRF24L01_Register@Register_Content,c
   686  007F20  0E04               	movlw	4
   687  007F22  EC7F  F03E         	call	_Write_nRF24L01_Register
   688                           
   689                           ;nRF24l01.c: 297: Write_nRF24L01_Register (0x05, Frequency_Channel);
   690  007F26  C006  F004         	movff	Start_TX_Mode_nRF24L01@Frequency_Channel,Write_nRF24L01_Register@Register_Content
   691  007F2A  0E05               	movlw	5
   692  007F2C  EC7F  F03E         	call	_Write_nRF24L01_Register
   693                           
   694                           ;nRF24l01.c: 299: Write_nRF24L01_Register (0x06, RF_Data_Rate*0b1000 + RF_Output_Power*0
      +                          b10 + LNA_Gain);
   695  007F30  5008               	movf	Start_TX_Mode_nRF24L01@RF_Output_Power,w,c
   696  007F32  0D02               	mullw	2
   697  007F34  CFF3 F00F          	movff	prodl,??_Start_TX_Mode_nRF24L01
   698  007F38  5007               	movf	Start_TX_Mode_nRF24L01@RF_Data_Rate,w,c
   699  007F3A  0D08               	mullw	8
   700  007F3C  50F3               	movf	prodl,w,c
   701  007F3E  240F               	addwf	??_Start_TX_Mode_nRF24L01,w,c
   702  007F40  2409               	addwf	Start_TX_Mode_nRF24L01@LNA_Gain,w,c
   703  007F42  6E04               	movwf	Write_nRF24L01_Register@Register_Content,c
   704  007F44  0E06               	movlw	6
   705  007F46  EC7F  F03E         	call	_Write_nRF24L01_Register
   706                           
   707                           ;nRF24l01.c: 300: Write_nRF24L01_Register (0x11, TX_RX_Payload_Width+Enable_Checksum);
   708  007F4A  500E               	movf	Start_TX_Mode_nRF24L01@TX_RX_Payload_Width,w,c
   709  007F4C  240D               	addwf	Start_TX_Mode_nRF24L01@Enable_Checksum,w,c
   710  007F4E  6E04               	movwf	Write_nRF24L01_Register@Register_Content,c
   711  007F50  0E11               	movlw	17
   712  007F52  EC7F  F03E         	call	_Write_nRF24L01_Register
   713                           
   714                           ;nRF24l01.c: 302: Write_nRF24L01_Register (0x00,0b00001000 + CRC_Setup*0b100 + 0b0000001
      +                          0 + 0*0b00000001);
   715  007F56  500A               	movf	Start_TX_Mode_nRF24L01@CRC_Setup,w,c
   716  007F58  0D04               	mullw	4
   717  007F5A  50F3               	movf	prodl,w,c
   718  007F5C  0F0A               	addlw	10
   719  007F5E  6E04               	movwf	Write_nRF24L01_Register@Register_Content,c
   720  007F60  0E00               	movlw	0
   721  007F62  EC7F  F03E         	call	_Write_nRF24L01_Register
   722                           
   723                           ;nRF24l01.c: 303: _delay((unsigned long)((2)*(48000000UL/4000.0)));
   724  007F66  0E20               	movlw	32
   725  007F68  6E0F               	movwf	??_Start_TX_Mode_nRF24L01& (0+255),c
   726  007F6A  0E2A               	movlw	42
   727  007F6C                     u317:
   728  007F6C  2EE8               	decfsz	wreg,f,c
   729  007F6E  D7FE               	bra	u317
   730  007F70  2E0F               	decfsz	??_Start_TX_Mode_nRF24L01& (0+255),f,c
   731  007F72  D7FC               	bra	u317
   732  007F74  0012               	return		;funcret
   733  007F76                     __end_of_Start_TX_Mode_nRF24L01:
   734                           	opt stack 0
   735                           tblptru	equ	0xFF8
   736                           tblptrh	equ	0xFF7
   737                           tblptrl	equ	0xFF6
   738                           tablat	equ	0xFF5
   739                           prodl	equ	0xFF3
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           postinc1	equ	0xFE6
   743                           postdec1	equ	0xFE5
   744                           plusw1	equ	0xFE3
   745                           fsr1h	equ	0xFE2
   746                           fsr1l	equ	0xFE1
   747                           indf2	equ	0xFDF
   748                           postinc2	equ	0xFDE
   749                           plusw2	equ	0xFDB
   750                           fsr2h	equ	0xFDA
   751                           fsr2l	equ	0xFD9
   752                           
   753 ;; *************** function _Write_nRF24L01_Register *****************
   754 ;; Defined at:
   755 ;;		line 61 in file "nRF24l01.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  Register_Add    1    wreg     unsigned char 
   758 ;;  Register_Con    1    3[COMRAM] unsigned char 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  Register_Add    1    4[COMRAM] unsigned char 
   761 ;;  nRF24L01_Sta    1    0        unsigned char 
   762 ;;  dummydata       1    0        unsigned char 
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   772 ;;      Params:         1       0       0       0       0       0       0       0       0
   773 ;;      Locals:         1       0       0       0       0       0       0       0       0
   774 ;;      Temps:          0       0       0       0       0       0       0       0       0
   775 ;;      Totals:         2       0       0       0       0       0       0       0       0
   776 ;;Total ram usage:        2 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    2
   779 ;; This function calls:
   780 ;;		_Read_nRF24L01_Register
   781 ;;		_SPI_Transfer
   782 ;; This function is called by:
   783 ;;		_Start_TX_Mode_nRF24L01
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text3
   788  007CFE                     __ptext3:
   789                           	opt stack 0
   790  007CFE                     _Write_nRF24L01_Register:
   791                           	opt stack 27
   792                           
   793                           ;incstack = 0
   794                           ;Write_nRF24L01_Register@Register_Address stored from wreg
   795  007CFE  6E05               	movwf	Write_nRF24L01_Register@Register_Address,c
   796                           
   797                           ;nRF24l01.c: 63: unsigned char dummydata, nRF24L01_Status;
   798                           ;nRF24l01.c: 64: LATAbits.LATA3=0;
   799                           
   800                           ;nRF24l01.c: 65: nRF24L01_Status=SPI_Transfer(0b00100000+Register_Address);
   801  007D00  D813               	call	PL8	;call to abstracted procedure
   802  007D02  EC18  F03E         	call	_SPI_Transfer
   803                           
   804                           ;nRF24l01.c: 67: dummydata=SPI_Transfer(Register_Content);
   805  007D06  5004               	movf	Write_nRF24L01_Register@Register_Content,w,c
   806  007D08  EC18  F03E         	call	_SPI_Transfer
   807  007D0C  D006               	goto	l1055
   808  007D0E                     l47:
   809                           
   810                           ;nRF24l01.c: 71: {
   811                           ;nRF24l01.c: 72: LATAbits.LATA3=0;
   812                           
   813                           ;nRF24l01.c: 73: nRF24L01_Status=SPI_Transfer(0b00100000+Register_Address);
   814  007D0E  D80C               	call	PL8	;call to abstracted procedure
   815  007D10  EC18  F03E         	call	_SPI_Transfer
   816                           
   817                           ;nRF24l01.c: 74: dummydata=SPI_Transfer(Register_Content);
   818  007D14  5004               	movf	Write_nRF24L01_Register@Register_Content,w,c
   819  007D16  EC18  F03E         	call	_SPI_Transfer
   820  007D1A                     l1055:
   821                           
   822                           ;nRF24l01.c: 75: LATAbits.LATA3=1;
   823  007D1A  8689               	bsf	3977,3,c	;volatile
   824  007D1C  5005               	movf	Write_nRF24L01_Register@Register_Address,w,c
   825  007D1E  EC3A  F03E         	call	_Read_nRF24L01_Register
   826  007D22  1804               	xorwf	Write_nRF24L01_Register@Register_Content,w,c
   827  007D24  E1F4               	bnz	l47
   828  007D26  0012               	return		;funcret
   829  007D28                     __end_of_Write_nRF24L01_Register:
   830                           	opt stack 0
   831  007D28                     PL8:
   832                           	opt stack 27
   833  007D28  9689               	bcf	3977,3,c	;volatile
   834  007D2A  5005               	movf	Write_nRF24L01_Register@Register_Address,w,c
   835  007D2C  0F20               	addlw	32
   836  007D2E  0012               	return	
   837  007D30                     __end_ofPL8:
   838                           	opt stack 0
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           prodl	equ	0xFF3
   844                           postinc0	equ	0xFEE
   845                           wreg	equ	0xFE8
   846                           postinc1	equ	0xFE6
   847                           postdec1	equ	0xFE5
   848                           plusw1	equ	0xFE3
   849                           fsr1h	equ	0xFE2
   850                           fsr1l	equ	0xFE1
   851                           indf2	equ	0xFDF
   852                           postinc2	equ	0xFDE
   853                           plusw2	equ	0xFDB
   854                           fsr2h	equ	0xFDA
   855                           fsr2l	equ	0xFD9
   856                           
   857 ;; *************** function _Reset_nRF24L01_Status_and_nRF24L01_Payloads *****************
   858 ;; Defined at:
   859 ;;		line 223 in file "nRF24l01.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;  nRF24L01_Sta    1    0        unsigned char 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   873 ;;      Params:         0       0       0       0       0       0       0       0       0
   874 ;;      Locals:         0       0       0       0       0       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0       0       0       0       0
   876 ;;      Totals:         0       0       0       0       0       0       0       0       0
   877 ;;Total ram usage:        0 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    2
   880 ;; This function calls:
   881 ;;		_SPI_Transfer
   882 ;;		_Write_nRF24L01_Status
   883 ;; This function is called by:
   884 ;;		_Start_TX_Mode_nRF24L01
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text4
   889  007CD2                     __ptext4:
   890                           	opt stack 0
   891  007CD2                     _Reset_nRF24L01_Status_and_nRF24L01_Payloads:
   892                           	opt stack 27
   893                           
   894                           ;nRF24l01.c: 225: unsigned char nRF24L01_Status;
   895                           ;nRF24l01.c: 227: LATAbits.LATA3=0;
   896                           
   897                           ;incstack = 0
   898  007CD2  9689               	bcf	3977,3,c	;volatile
   899                           
   900                           ;nRF24l01.c: 228: nRF24L01_Status=SPI_Transfer(0b11100001);
   901  007CD4  0EE1               	movlw	225
   902  007CD6  EC18  F03E         	call	_SPI_Transfer
   903                           
   904                           ;nRF24l01.c: 229: LATAbits.LATA3=1;
   905  007CDA  8689               	bsf	3977,3,c	;volatile
   906                           
   907                           ;nRF24l01.c: 230: _delay((unsigned long)((1)*(48000000UL/4000000.0)));
   908  007CDC  0E04               	movlw	4
   909  007CDE                     u327:
   910  007CDE  2EE8               	decfsz	wreg,f,c
   911  007CE0  D7FE               	bra	u327
   912                           
   913                           ;nRF24l01.c: 231: LATAbits.LATA3=0;
   914  007CE2  9689               	bcf	3977,3,c	;volatile
   915                           
   916                           ;nRF24l01.c: 232: nRF24L01_Status=SPI_Transfer(0b11100010);
   917  007CE4  0EE2               	movlw	226
   918  007CE6  EC18  F03E         	call	_SPI_Transfer
   919                           
   920                           ;nRF24l01.c: 233: LATAbits.LATA3=1;
   921  007CEA  8689               	bsf	3977,3,c	;volatile
   922                           
   923                           ;nRF24l01.c: 235: Write_nRF24L01_Status(0b01000000);
   924  007CEC  0E40               	movlw	64
   925  007CEE  EC30  F03E         	call	_Write_nRF24L01_Status
   926                           
   927                           ;nRF24l01.c: 236: Write_nRF24L01_Status(0b00100000);
   928  007CF2  0E20               	movlw	32
   929  007CF4  EC30  F03E         	call	_Write_nRF24L01_Status
   930                           
   931                           ;nRF24l01.c: 237: Write_nRF24L01_Status(0b00010000);
   932  007CF8  0E10               	movlw	16
   933  007CFA  EF30  F03E         	goto	_Write_nRF24L01_Status
   934  007CFE                     __end_of_Reset_nRF24L01_Status_and_nRF24L01_Payloads:
   935                           	opt stack 0
   936                           tblptru	equ	0xFF8
   937                           tblptrh	equ	0xFF7
   938                           tblptrl	equ	0xFF6
   939                           tablat	equ	0xFF5
   940                           prodl	equ	0xFF3
   941                           postinc0	equ	0xFEE
   942                           wreg	equ	0xFE8
   943                           postinc1	equ	0xFE6
   944                           postdec1	equ	0xFE5
   945                           plusw1	equ	0xFE3
   946                           fsr1h	equ	0xFE2
   947                           fsr1l	equ	0xFE1
   948                           indf2	equ	0xFDF
   949                           postinc2	equ	0xFDE
   950                           plusw2	equ	0xFDB
   951                           fsr2h	equ	0xFDA
   952                           fsr2l	equ	0xFD9
   953                           
   954 ;; *************** function _Send_Data_TX_Mode_nRF24L01 *****************
   955 ;; Defined at:
   956 ;;		line 345 in file "nRF24l01.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;  Enable_Check    1    wreg     unsigned char 
   959 ;;  TX_RX_Addres    1   25[COMRAM] unsigned char 
   960 ;;  TX_Address      1   26[COMRAM] PTR unsigned char 
   961 ;;		 -> main@direccion_tx(5), 
   962 ;;  TX_RX_Payloa    1   27[COMRAM] unsigned char 
   963 ;;  TX_Payload      1   28[COMRAM] PTR unsigned char 
   964 ;;		 -> main@mensaje(1), 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  Enable_Check    1   29[COMRAM] unsigned char 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  1    wreg      void 
   969 ;; Registers used:
   970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   976 ;;      Params:         4       0       0       0       0       0       0       0       0
   977 ;;      Locals:         1       0       0       0       0       0       0       0       0
   978 ;;      Temps:          0       0       0       0       0       0       0       0       0
   979 ;;      Totals:         5       0       0       0       0       0       0       0       0
   980 ;;Total ram usage:        5 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; Hardware stack levels required when called:    3
   983 ;; This function calls:
   984 ;;		_Write_nRF24L01_Address_Register
   985 ;;		_Write_nRF24L01_TX_Payload
   986 ;; This function is called by:
   987 ;;		_main
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text5
   992  007D7A                     __ptext5:
   993                           	opt stack 0
   994  007D7A                     _Send_Data_TX_Mode_nRF24L01:
   995                           	opt stack 27
   996                           
   997                           ;incstack = 0
   998                           ;Send_Data_TX_Mode_nRF24L01@Enable_Checksum stored from wreg
   999  007D7A  6E1E               	movwf	Send_Data_TX_Mode_nRF24L01@Enable_Checksum,c
  1000                           
  1001                           ;nRF24l01.c: 347: Write_nRF24L01_Address_Register (TX_RX_Address_Width, 0x10, TX_Address
      +                          );
  1002  007D7C  0E10               	movlw	16
  1003  007D7E  D81E               	call	PL6	;call to abstracted procedure
  1004  007D80  ECBB  F03F         	call	_Write_nRF24L01_Address_Register
  1005                           
  1006                           ;nRF24l01.c: 349: Write_nRF24L01_Address_Register (TX_RX_Address_Width, 0x0A, TX_Address
      +                          );
  1007  007D84  0E0A               	movlw	10
  1008  007D86  D81A               	call	PL6	;call to abstracted procedure
  1009  007D88  ECBB  F03F         	call	_Write_nRF24L01_Address_Register
  1010                           
  1011                           ;nRF24l01.c: 351: Write_nRF24L01_TX_Payload (Enable_Checksum, TX_RX_Payload_Width, TX_Pa
      +                          yload);
  1012  007D8C  C01C  F002         	movff	Send_Data_TX_Mode_nRF24L01@TX_RX_Payload_Width,Write_nRF24L01_TX_Payload@TX_RX_Pa
      +                          yload_Width
  1013  007D90  C01D  F003         	movff	Send_Data_TX_Mode_nRF24L01@TX_Payload,Write_nRF24L01_TX_Payload@TX_Payload
  1014  007D94  501E               	movf	Send_Data_TX_Mode_nRF24L01@Enable_Checksum,w,c
  1015  007D96  ECE3  F03E         	call	_Write_nRF24L01_TX_Payload
  1016                           
  1017                           ;nRF24l01.c: 354: LATAbits.LATA2 = 1;
  1018  007D9A  8489               	bsf	3977,2,c	;volatile
  1019                           
  1020                           ;nRF24l01.c: 356: _delay((unsigned long)((130)*(48000000UL/4000000.0)));
  1021  007D9C  0EDE               	movlw	222
  1022  007D9E                     u337:
  1023  007D9E  D000               	nop2	
  1024  007DA0  D000               	nop2	
  1025  007DA2  2EE8               	decfsz	wreg,f,c
  1026  007DA4  D7FC               	bra	u337
  1027  007DA6  D000               	nop2	
  1028  007DA8  D000               	nop2	
  1029  007DAA  D000               	nop2	
  1030                           
  1031                           ;nRF24l01.c: 357: _delay((unsigned long)((10)*(48000000UL/4000000.0)));
  1032  007DAC  0E28               	movlw	40
  1033  007DAE                     u347:
  1034  007DAE  2EE8               	decfsz	wreg,f,c
  1035  007DB0  D7FE               	bra	u347
  1036                           
  1037                           ;nRF24l01.c: 359: LATAbits.LATA2 = 0;
  1038  007DB2  9489               	bcf	3977,2,c	;volatile
  1039                           
  1040                           ;nRF24l01.c: 361: _delay((unsigned long)((4)*(48000000UL/4000000.0)));
  1041  007DB4  0E10               	movlw	16
  1042  007DB6                     u357:
  1043  007DB6  2EE8               	decfsz	wreg,f,c
  1044  007DB8  D7FE               	bra	u357
  1045  007DBA  0012               	return		;funcret
  1046  007DBC                     __end_of_Send_Data_TX_Mode_nRF24L01:
  1047                           	opt stack 0
  1048  007DBC                     PL6:
  1049                           	opt stack 27
  1050  007DBC  6E0B               	movwf	Write_nRF24L01_Address_Register@Register_Address,c
  1051  007DBE  C01B  F00C         	movff	Send_Data_TX_Mode_nRF24L01@TX_Address,Write_nRF24L01_Address_Register@Register_Co
      +                          ntent
  1052  007DC2  501A               	movf	Send_Data_TX_Mode_nRF24L01@TX_RX_Address_Width,w,c
  1053  007DC4  0012               	return	
  1054  007DC6                     __end_ofPL6:
  1055                           	opt stack 0
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           prodl	equ	0xFF3
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           postinc1	equ	0xFE6
  1064                           postdec1	equ	0xFE5
  1065                           plusw1	equ	0xFE3
  1066                           fsr1h	equ	0xFE2
  1067                           fsr1l	equ	0xFE1
  1068                           indf2	equ	0xFDF
  1069                           postinc2	equ	0xFDE
  1070                           plusw2	equ	0xFDB
  1071                           fsr2h	equ	0xFDA
  1072                           fsr2l	equ	0xFD9
  1073                           
  1074 ;; *************** function _Write_nRF24L01_TX_Payload *****************
  1075 ;; Defined at:
  1076 ;;		line 192 in file "nRF24l01.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  Enable_Check    1    wreg     unsigned char 
  1079 ;;  TX_RX_Payloa    1    1[COMRAM] unsigned char 
  1080 ;;  TX_Payload      1    2[COMRAM] PTR unsigned char 
  1081 ;;		 -> main@mensaje(1), 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  Enable_Check    1    4[COMRAM] unsigned char 
  1084 ;;  i               1    5[COMRAM] unsigned char 
  1085 ;;  TX_Checksum     1    3[COMRAM] unsigned char 
  1086 ;;  dummydata       1    0        unsigned char 
  1087 ;;  nRF24L01_Sta    1    0        unsigned char 
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1097 ;;      Params:         2       0       0       0       0       0       0       0       0
  1098 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1100 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1101 ;;Total ram usage:        5 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; Hardware stack levels required when called:    1
  1104 ;; This function calls:
  1105 ;;		_SPI_Transfer
  1106 ;; This function is called by:
  1107 ;;		_Send_Data_TX_Mode_nRF24L01
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text6
  1112  007DC6                     __ptext6:
  1113                           	opt stack 0
  1114  007DC6                     _Write_nRF24L01_TX_Payload:
  1115                           	opt stack 28
  1116                           
  1117                           ;incstack = 0
  1118                           ;Write_nRF24L01_TX_Payload@Enable_Checksum stored from wreg
  1119  007DC6  6E05               	movwf	Write_nRF24L01_TX_Payload@Enable_Checksum,c
  1120                           
  1121                           ;nRF24l01.c: 194: unsigned char nRF24L01_Status, TX_Checksum;
  1122                           ;nRF24l01.c: 195: unsigned char i, dummydata;
  1123                           ;nRF24l01.c: 197: LATAbits.LATA3=0;
  1124  007DC8  9689               	bcf	3977,3,c	;volatile
  1125                           
  1126                           ;nRF24l01.c: 198: nRF24L01_Status=SPI_Transfer(0b10100000);
  1127  007DCA  0EA0               	movlw	160
  1128  007DCC  EC18  F03E         	call	_SPI_Transfer
  1129                           
  1130                           ;nRF24l01.c: 199: if(!Enable_Checksum)
  1131  007DD0  5005               	movf	Write_nRF24L01_TX_Payload@Enable_Checksum,w,c
  1132  007DD2  E10A               	bnz	l1101
  1133                           
  1134                           ;nRF24l01.c: 200: {
  1135                           ;nRF24l01.c: 201: for(i=0; i<TX_RX_Payload_Width; i++)
  1136  007DD4  6A06               	clrf	Write_nRF24L01_TX_Payload@i,c
  1137  007DD6  D004               	goto	l1099
  1138  007DD8                     l1095:
  1139                           
  1140                           ;nRF24l01.c: 202: {
  1141                           ;nRF24l01.c: 203: dummydata=SPI_Transfer(TX_Payload[i]);
  1142  007DD8  D81A               	call	PL4	;call to abstracted procedure
  1143  007DDA  EC18  F03E         	call	_SPI_Transfer
  1144  007DDE  2A06               	incf	Write_nRF24L01_TX_Payload@i,f,c
  1145  007DE0                     l1099:
  1146  007DE0  5002               	movf	Write_nRF24L01_TX_Payload@TX_RX_Payload_Width,w,c
  1147  007DE2  5C06               	subwf	Write_nRF24L01_TX_Payload@i,w,c
  1148  007DE4  E212               	bc	l1115
  1149  007DE6  D7F8               	goto	l1095
  1150  007DE8                     l1101:
  1151                           
  1152                           ;nRF24l01.c: 207: else if(Enable_Checksum)
  1153  007DE8  5005               	movf	Write_nRF24L01_TX_Payload@Enable_Checksum,w,c
  1154  007DEA  E00F               	bz	l1115
  1155                           
  1156                           ;nRF24l01.c: 208: {
  1157                           ;nRF24l01.c: 209: TX_Checksum=0b00000000;
  1158  007DEC  6A04               	clrf	Write_nRF24L01_TX_Payload@TX_Checksum,c
  1159                           
  1160                           ;nRF24l01.c: 210: for(i=0; i<TX_RX_Payload_Width; i++)
  1161  007DEE  6A06               	clrf	Write_nRF24L01_TX_Payload@i,c
  1162  007DF0  D006               	goto	l1111
  1163  007DF2                     l1105:
  1164                           
  1165                           ;nRF24l01.c: 211: {
  1166                           ;nRF24l01.c: 212: dummydata=SPI_Transfer(TX_Payload[i]);
  1167  007DF2  D80D               	call	PL4	;call to abstracted procedure
  1168  007DF4  EC18  F03E         	call	_SPI_Transfer
  1169                           
  1170                           ;nRF24l01.c: 214: TX_Checksum=TX_Checksum+TX_Payload[i];
  1171  007DF8  D80A               	call	PL4	;call to abstracted procedure
  1172  007DFA  2604               	addwf	Write_nRF24L01_TX_Payload@TX_Checksum,f,c
  1173  007DFC  2A06               	incf	Write_nRF24L01_TX_Payload@i,f,c
  1174  007DFE                     l1111:
  1175  007DFE  5002               	movf	Write_nRF24L01_TX_Payload@TX_RX_Payload_Width,w,c
  1176  007E00  5C06               	subwf	Write_nRF24L01_TX_Payload@i,w,c
  1177  007E02  E3F7               	bnc	l1105
  1178                           
  1179                           ;nRF24l01.c: 216: }
  1180                           ;nRF24l01.c: 217: dummydata=SPI_Transfer(TX_Checksum);
  1181  007E04  5004               	movf	Write_nRF24L01_TX_Payload@TX_Checksum,w,c
  1182  007E06  EC18  F03E         	call	_SPI_Transfer
  1183  007E0A                     l1115:
  1184                           
  1185                           ;nRF24l01.c: 219: }
  1186                           ;nRF24l01.c: 220: LATAbits.LATA3=1;
  1187  007E0A  8689               	bsf	3977,3,c	;volatile
  1188  007E0C  0012               	return		;funcret
  1189  007E0E                     __end_of_Write_nRF24L01_TX_Payload:
  1190                           	opt stack 0
  1191  007E0E                     PL4:
  1192                           	opt stack 28
  1193  007E0E  5003               	movf	Write_nRF24L01_TX_Payload@TX_Payload,w,c
  1194  007E10  2406               	addwf	Write_nRF24L01_TX_Payload@i,w,c
  1195  007E12  6ED9               	movwf	fsr2l,c
  1196  007E14  6ADA               	clrf	fsr2h,c
  1197  007E16  50DF               	movf	indf2,w,c
  1198  007E18  0012               	return	
  1199  007E1A                     __end_ofPL4:
  1200                           	opt stack 0
  1201                           tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           prodl	equ	0xFF3
  1206                           postinc0	equ	0xFEE
  1207                           wreg	equ	0xFE8
  1208                           postinc1	equ	0xFE6
  1209                           postdec1	equ	0xFE5
  1210                           plusw1	equ	0xFE3
  1211                           fsr1h	equ	0xFE2
  1212                           fsr1l	equ	0xFE1
  1213                           indf2	equ	0xFDF
  1214                           postinc2	equ	0xFDE
  1215                           plusw2	equ	0xFDB
  1216                           fsr2h	equ	0xFDA
  1217                           fsr2l	equ	0xFD9
  1218                           
  1219 ;; *************** function _Write_nRF24L01_Address_Register *****************
  1220 ;; Defined at:
  1221 ;;		line 116 in file "nRF24l01.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  TX_RX_Addres    1    wreg     unsigned char 
  1224 ;;  Register_Add    1   10[COMRAM] unsigned char 
  1225 ;;  Register_Con    1   11[COMRAM] PTR unsigned char 
  1226 ;;		 -> main@direccion_tx(5), 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  TX_RX_Addres    1   23[COMRAM] unsigned char 
  1229 ;;  Address_Veri    5   17[COMRAM] unsigned char [5]
  1230 ;;  i               1   24[COMRAM] unsigned char 
  1231 ;;  Process_Fini    1   22[COMRAM] unsigned char 
  1232 ;;  nRF24L01_Sta    1    0        unsigned char 
  1233 ;;  dummydata       1    0        unsigned char 
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1243 ;;      Params:         2       0       0       0       0       0       0       0       0
  1244 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1245 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1246 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1247 ;;Total ram usage:       15 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    2
  1250 ;; This function calls:
  1251 ;;		_Read_nRF24L01_Address_Register
  1252 ;;		_SPI_Transfer
  1253 ;; This function is called by:
  1254 ;;		_Send_Data_TX_Mode_nRF24L01
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text7
  1259  007F76                     __ptext7:
  1260                           	opt stack 0
  1261  007F76                     _Write_nRF24L01_Address_Register:
  1262                           	opt stack 27
  1263                           
  1264                           ;incstack = 0
  1265                           ;Write_nRF24L01_Address_Register@TX_RX_Address_Width stored from wreg
  1266  007F76  6E18               	movwf	Write_nRF24L01_Address_Register@TX_RX_Address_Width,c
  1267                           
  1268                           ;nRF24l01.c: 118: unsigned char dummydata, i, nRF24L01_Status;
  1269                           ;nRF24l01.c: 119: unsigned char Process_Finished;
  1270                           ;nRF24l01.c: 120: unsigned char Address_Verification[5];
  1271                           ;nRF24l01.c: 122: Process_Finished=0;
  1272  007F78  6A17               	clrf	Write_nRF24L01_Address_Register@Process_Finished,c
  1273                           
  1274                           ;nRF24l01.c: 123: while(!Process_Finished)
  1275  007F7A  D02C               	goto	l1085
  1276  007F7C                     l65:
  1277                           
  1278                           ;nRF24l01.c: 124: {
  1279                           ;nRF24l01.c: 125: LATAbits.LATA3=0;
  1280  007F7C  9689               	bcf	3977,3,c	;volatile
  1281                           
  1282                           ;nRF24l01.c: 126: nRF24L01_Status=SPI_Transfer(0b00100000+Register_Address);
  1283  007F7E  500B               	movf	Write_nRF24L01_Address_Register@Register_Address,w,c
  1284  007F80  0F20               	addlw	32
  1285  007F82  EC18  F03E         	call	_SPI_Transfer
  1286                           
  1287                           ;nRF24l01.c: 127: for(i=0; i<(TX_RX_Address_Width+0b10); i++)
  1288  007F86  6A19               	clrf	Write_nRF24L01_Address_Register@i,c
  1289  007F88  D008               	goto	l1069
  1290  007F8A                     l1065:
  1291                           
  1292                           ;nRF24l01.c: 128: {
  1293                           ;nRF24l01.c: 129: dummydata=SPI_Transfer(Register_Content[i]);
  1294  007F8A  500C               	movf	Write_nRF24L01_Address_Register@Register_Content,w,c
  1295  007F8C  2419               	addwf	Write_nRF24L01_Address_Register@i,w,c
  1296  007F8E  6ED9               	movwf	fsr2l,c
  1297  007F90  6ADA               	clrf	fsr2h,c
  1298  007F92  50DF               	movf	indf2,w,c
  1299  007F94  EC18  F03E         	call	_SPI_Transfer
  1300  007F98  2A19               	incf	Write_nRF24L01_Address_Register@i,f,c
  1301  007F9A                     l1069:
  1302  007F9A  D81F               	call	PL2	;call to abstracted procedure
  1303  007F9C  E3F6               	bnc	l1065
  1304                           
  1305                           ;nRF24l01.c: 130: }
  1306                           ;nRF24l01.c: 131: LATAbits.LATA3=1;
  1307  007F9E  8689               	bsf	3977,3,c	;volatile
  1308                           
  1309                           ;nRF24l01.c: 133: Read_nRF24L01_Address_Register(TX_RX_Address_Width, Register_Address, 
      +                          Address_Verification);
  1310  007FA0  C00B  F002         	movff	Write_nRF24L01_Address_Register@Register_Address,Read_nRF24L01_Address_Register@R
      +                          egister_Address
  1311  007FA4  0E12               	movlw	low Write_nRF24L01_Address_Register@Address_Verification
  1312  007FA6  6E03               	movwf	Read_nRF24L01_Address_Register@Register_Content,c
  1313  007FA8  5018               	movf	Write_nRF24L01_Address_Register@TX_RX_Address_Width,w,c
  1314  007FAA  EC98  F03E         	call	_Read_nRF24L01_Address_Register
  1315                           
  1316                           ;nRF24l01.c: 134: Process_Finished=1;
  1317  007FAE  0E01               	movlw	1
  1318  007FB0  6E17               	movwf	Write_nRF24L01_Address_Register@Process_Finished,c
  1319                           
  1320                           ;nRF24l01.c: 135: for(i=0; i<(TX_RX_Address_Width+0b10); i++)
  1321  007FB2  6A19               	clrf	Write_nRF24L01_Address_Register@i,c
  1322  007FB4  D00D               	goto	l1083
  1323  007FB6                     l1077:
  1324                           
  1325                           ;nRF24l01.c: 136: {
  1326                           ;nRF24l01.c: 137: if(Register_Content[i]!=Address_Verification[i])
  1327  007FB6  5019               	movf	Write_nRF24L01_Address_Register@i,w,c
  1328  007FB8  0F12               	addlw	low Write_nRF24L01_Address_Register@Address_Verification
  1329  007FBA  6ED9               	movwf	fsr2l,c
  1330  007FBC  6ADA               	clrf	fsr2h,c
  1331  007FBE  500C               	movf	Write_nRF24L01_Address_Register@Register_Content,w,c
  1332  007FC0  2419               	addwf	Write_nRF24L01_Address_Register@i,w,c
  1333  007FC2  6EE1               	movwf	fsr1l,c
  1334  007FC4  6AE2               	clrf	fsr1h,c
  1335  007FC6  50DE               	movf	postinc2,w,c
  1336  007FC8  18E6               	xorwf	postinc1,w,c
  1337  007FCA  E001               	bz	l1081
  1338                           
  1339                           ;nRF24l01.c: 138: {
  1340                           ;nRF24l01.c: 139: Process_Finished=0;
  1341  007FCC  6A17               	clrf	Write_nRF24L01_Address_Register@Process_Finished,c
  1342  007FCE                     l1081:
  1343  007FCE  2A19               	incf	Write_nRF24L01_Address_Register@i,f,c
  1344  007FD0                     l1083:
  1345  007FD0  D804               	call	PL2	;call to abstracted procedure
  1346  007FD2  E3F1               	bnc	l1077
  1347  007FD4                     l1085:
  1348  007FD4  5017               	movf	Write_nRF24L01_Address_Register@Process_Finished,w,c
  1349  007FD6  E0D2               	bz	l65
  1350  007FD8  0012               	return		;funcret
  1351  007FDA                     __end_of_Write_nRF24L01_Address_Register:
  1352                           	opt stack 0
  1353  007FDA                     PL2:
  1354                           	opt stack 27
  1355  007FDA  5018               	movf	Write_nRF24L01_Address_Register@TX_RX_Address_Width,w,c
  1356  007FDC  6E0D               	movwf	??_Write_nRF24L01_Address_Register& (0+255),c
  1357  007FDE  6A0E               	clrf	(??_Write_nRF24L01_Address_Register+1)& (0+255),c
  1358  007FE0  0E02               	movlw	2
  1359  007FE2  260D               	addwf	??_Write_nRF24L01_Address_Register,f,c
  1360  007FE4  0E00               	movlw	0
  1361  007FE6  220E               	addwfc	??_Write_nRF24L01_Address_Register+1,f,c
  1362  007FE8  5019               	movf	Write_nRF24L01_Address_Register@i,w,c
  1363  007FEA  6E0F               	movwf	(??_Write_nRF24L01_Address_Register+2)& (0+255),c
  1364  007FEC  6A10               	clrf	(??_Write_nRF24L01_Address_Register+3)& (0+255),c
  1365  007FEE  500D               	movf	??_Write_nRF24L01_Address_Register,w,c
  1366  007FF0  5C0F               	subwf	??_Write_nRF24L01_Address_Register+2,w,c
  1367  007FF2  5010               	movf	??_Write_nRF24L01_Address_Register+3,w,c
  1368  007FF4  0A80               	xorlw	128
  1369  007FF6  6E11               	movwf	(??_Write_nRF24L01_Address_Register+4)& (0+255),c
  1370  007FF8  500E               	movf	??_Write_nRF24L01_Address_Register+1,w,c
  1371  007FFA  0A80               	xorlw	128
  1372  007FFC  5811               	subwfb	(??_Write_nRF24L01_Address_Register+4)& (0+255),w,c
  1373  007FFE  0012               	return	
  1374  008000                     __end_ofPL2:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           prodl	equ	0xFF3
  1381                           postinc0	equ	0xFEE
  1382                           wreg	equ	0xFE8
  1383                           postinc1	equ	0xFE6
  1384                           postdec1	equ	0xFE5
  1385                           plusw1	equ	0xFE3
  1386                           fsr1h	equ	0xFE2
  1387                           fsr1l	equ	0xFE1
  1388                           indf2	equ	0xFDF
  1389                           postinc2	equ	0xFDE
  1390                           plusw2	equ	0xFDB
  1391                           fsr2h	equ	0xFDA
  1392                           fsr2l	equ	0xFD9
  1393                           
  1394 ;; *************** function _Read_nRF24L01_Address_Register *****************
  1395 ;; Defined at:
  1396 ;;		line 103 in file "nRF24l01.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  TX_RX_Addres    1    wreg     unsigned char 
  1399 ;;  Register_Add    1    1[COMRAM] unsigned char 
  1400 ;;  Register_Con    1    2[COMRAM] PTR unsigned char 
  1401 ;;		 -> Write_nRF24L01_Address_Register@Address_Verification(5), 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;  TX_RX_Addres    1    8[COMRAM] unsigned char 
  1404 ;;  i               1    9[COMRAM] unsigned char 
  1405 ;;  nRF24L01_Sta    1    0        unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      void 
  1408 ;; Registers used:
  1409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1415 ;;      Params:         2       0       0       0       0       0       0       0       0
  1416 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1417 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1418 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1419 ;;Total ram usage:        9 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    1
  1422 ;; This function calls:
  1423 ;;		_SPI_Transfer
  1424 ;; This function is called by:
  1425 ;;		_Write_nRF24L01_Address_Register
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text8
  1430  007D30                     __ptext8:
  1431                           	opt stack 0
  1432  007D30                     _Read_nRF24L01_Address_Register:
  1433                           	opt stack 27
  1434                           
  1435                           ;incstack = 0
  1436                           ;Read_nRF24L01_Address_Register@TX_RX_Address_Width stored from wreg
  1437  007D30  6E09               	movwf	Read_nRF24L01_Address_Register@TX_RX_Address_Width,c
  1438                           
  1439                           ;nRF24l01.c: 105: unsigned char i, nRF24L01_Status;
  1440                           ;nRF24l01.c: 107: LATAbits.LATA3=0;
  1441  007D32  9689               	bcf	3977,3,c	;volatile
  1442                           
  1443                           ;nRF24l01.c: 108: nRF24L01_Status=SPI_Transfer(0b00000000+Register_Address);
  1444  007D34  5002               	movf	Read_nRF24L01_Address_Register@Register_Address,w,c
  1445  007D36  EC18  F03E         	call	_SPI_Transfer
  1446                           
  1447                           ;nRF24l01.c: 109: for(i=0; i<(TX_RX_Address_Width+0b10); i++)
  1448  007D3A  6A0A               	clrf	Read_nRF24L01_Address_Register@i,c
  1449  007D3C  D009               	goto	l1041
  1450  007D3E                     l1037:
  1451                           
  1452                           ;nRF24l01.c: 110: {
  1453                           ;nRF24l01.c: 111: Register_Content[i]=SPI_Transfer(0x00);
  1454  007D3E  5003               	movf	Read_nRF24L01_Address_Register@Register_Content,w,c
  1455  007D40  240A               	addwf	Read_nRF24L01_Address_Register@i,w,c
  1456  007D42  6ED9               	movwf	fsr2l,c
  1457  007D44  6ADA               	clrf	fsr2h,c
  1458  007D46  0E00               	movlw	0
  1459  007D48  EC18  F03E         	call	_SPI_Transfer
  1460  007D4C  6EDF               	movwf	indf2,c
  1461  007D4E  2A0A               	incf	Read_nRF24L01_Address_Register@i,f,c
  1462  007D50                     l1041:
  1463  007D50  5009               	movf	Read_nRF24L01_Address_Register@TX_RX_Address_Width,w,c
  1464  007D52  6E04               	movwf	??_Read_nRF24L01_Address_Register& (0+255),c
  1465  007D54  6A05               	clrf	(??_Read_nRF24L01_Address_Register+1)& (0+255),c
  1466  007D56  0E02               	movlw	2
  1467  007D58  2604               	addwf	??_Read_nRF24L01_Address_Register,f,c
  1468  007D5A  0E00               	movlw	0
  1469  007D5C  2205               	addwfc	??_Read_nRF24L01_Address_Register+1,f,c
  1470  007D5E  500A               	movf	Read_nRF24L01_Address_Register@i,w,c
  1471  007D60  6E06               	movwf	(??_Read_nRF24L01_Address_Register+2)& (0+255),c
  1472  007D62  6A07               	clrf	(??_Read_nRF24L01_Address_Register+3)& (0+255),c
  1473  007D64  5004               	movf	??_Read_nRF24L01_Address_Register,w,c
  1474  007D66  5C06               	subwf	??_Read_nRF24L01_Address_Register+2,w,c
  1475  007D68  5007               	movf	??_Read_nRF24L01_Address_Register+3,w,c
  1476  007D6A  0A80               	xorlw	128
  1477  007D6C  6E08               	movwf	(??_Read_nRF24L01_Address_Register+4)& (0+255),c
  1478  007D6E  5005               	movf	??_Read_nRF24L01_Address_Register+1,w,c
  1479  007D70  0A80               	xorlw	128
  1480  007D72  5808               	subwfb	(??_Read_nRF24L01_Address_Register+4)& (0+255),w,c
  1481  007D74  E3E4               	bnc	l1037
  1482                           
  1483                           ;nRF24l01.c: 112: }
  1484                           ;nRF24l01.c: 113: LATAbits.LATA3=1;
  1485  007D76  8689               	bsf	3977,3,c	;volatile
  1486  007D78  0012               	return		;funcret
  1487  007D7A                     __end_of_Read_nRF24L01_Address_Register:
  1488                           	opt stack 0
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           prodl	equ	0xFF3
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postinc1	equ	0xFE6
  1497                           postdec1	equ	0xFE5
  1498                           plusw1	equ	0xFE3
  1499                           fsr1h	equ	0xFE2
  1500                           fsr1l	equ	0xFE1
  1501                           indf2	equ	0xFDF
  1502                           postinc2	equ	0xFDE
  1503                           plusw2	equ	0xFDB
  1504                           fsr2h	equ	0xFDA
  1505                           fsr2l	equ	0xFD9
  1506                           
  1507 ;; *************** function _SPI_Start *****************
  1508 ;; Defined at:
  1509 ;;		line 11 in file "nRF24l01.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  Clock_Freque    1    wreg     unsigned char 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  Clock_Freque    1    0[COMRAM] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, status,2, status,0
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0
  1524 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1526 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1527 ;;Total ram usage:        1 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text9
  1537  007C8C                     __ptext9:
  1538                           	opt stack 0
  1539  007C8C                     _SPI_Start:
  1540                           	opt stack 30
  1541                           
  1542                           ;incstack = 0
  1543                           ;SPI_Start@Clock_Frequency stored from wreg
  1544  007C8C  6E01               	movwf	SPI_Start@Clock_Frequency,c
  1545                           
  1546                           ;nRF24l01.c: 13: TRISBbits.RB1 = 0;
  1547  007C8E  9293               	bcf	3987,1,c	;volatile
  1548                           
  1549                           ;nRF24l01.c: 14: TRISBbits.RB0 = 1;
  1550  007C90  8093               	bsf	3987,0,c	;volatile
  1551                           
  1552                           ;nRF24l01.c: 15: TRISCbits.RC7 = 0;
  1553  007C92  9E94               	bcf	3988,7,c	;volatile
  1554                           
  1555                           ;nRF24l01.c: 16: SSPCON1 = (SSPCON1 & 0xF0) | Clock_Frequency;
  1556  007C94  50C6               	movf	4038,w,c	;volatile
  1557  007C96  0BF0               	andlw	240
  1558  007C98  1001               	iorwf	SPI_Start@Clock_Frequency,w,c
  1559  007C9A  6EC6               	movwf	4038,c	;volatile
  1560                           
  1561                           ;nRF24l01.c: 18: SSPCON1bits.CKP=0;
  1562  007C9C  98C6               	bcf	4038,4,c	;volatile
  1563                           
  1564                           ;nRF24l01.c: 19: SSPSTATbits.CKE=1;
  1565  007C9E  8CC7               	bsf	4039,6,c	;volatile
  1566                           
  1567                           ;nRF24l01.c: 20: SSPSTATbits.SMP=1;
  1568  007CA0  8EC7               	bsf	4039,7,c	;volatile
  1569                           
  1570                           ;nRF24l01.c: 21: PIE1bits.SSPIE=0;
  1571  007CA2  969D               	bcf	3997,3,c	;volatile
  1572                           
  1573                           ;nRF24l01.c: 22: IPR1bits.SSPIP=0;
  1574  007CA4  969F               	bcf	3999,3,c	;volatile
  1575                           
  1576                           ;nRF24l01.c: 23: PIR1bits.SSPIF=0;
  1577  007CA6  969E               	bcf	3998,3,c	;volatile
  1578                           
  1579                           ;nRF24l01.c: 24: SSPCON1bits.SSPEN=1;
  1580  007CA8  8AC6               	bsf	4038,5,c	;volatile
  1581  007CAA  0012               	return		;funcret
  1582  007CAC                     __end_of_SPI_Start:
  1583                           	opt stack 0
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           prodl	equ	0xFF3
  1589                           postinc0	equ	0xFEE
  1590                           wreg	equ	0xFE8
  1591                           postinc1	equ	0xFE6
  1592                           postdec1	equ	0xFE5
  1593                           plusw1	equ	0xFE3
  1594                           fsr1h	equ	0xFE2
  1595                           fsr1l	equ	0xFE1
  1596                           indf2	equ	0xFDF
  1597                           postinc2	equ	0xFDE
  1598                           plusw2	equ	0xFDB
  1599                           fsr2h	equ	0xFDA
  1600                           fsr2l	equ	0xFD9
  1601                           
  1602 ;; *************** function _Check_Data_Sent_TX_Mode_nRF24L01 *****************
  1603 ;; Defined at:
  1604 ;;		line 365 in file "nRF24l01.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;		None
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  i               2    5[COMRAM] unsigned int 
  1609 ;;  nRF24L01_Sta    1    8[COMRAM] unsigned char 
  1610 ;;  j               1    7[COMRAM] unsigned char 
  1611 ;;  TX_Operation    1    0        unsigned char 
  1612 ;;  TX_Retransmi    1    0        unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      unsigned char 
  1615 ;; Registers used:
  1616 ;;		wreg, status,2, status,0, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1622 ;;      Params:         0       0       0       0       0       0       0       0       0
  1623 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1625 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1626 ;;Total ram usage:        6 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    2
  1629 ;; This function calls:
  1630 ;;		_Read_nRF24L01_Register
  1631 ;;		_Read_nRF24L01_Status
  1632 ;;		_Write_nRF24L01_Status
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text10
  1639  007E1A                     __ptext10:
  1640                           	opt stack 0
  1641  007E1A                     _Check_Data_Sent_TX_Mode_nRF24L01:
  1642                           	opt stack 28
  1643                           
  1644                           ;nRF24l01.c: 368: unsigned char TX_Operation_Result, TX_Retransmit_Counter;
  1645                           ;nRF24l01.c: 369: unsigned char nRF24L01_Status;
  1646                           ;nRF24l01.c: 370: unsigned int i;
  1647                           ;nRF24l01.c: 371: unsigned char j;
  1648                           ;nRF24l01.c: 373: i=0; j=0;
  1649                           
  1650                           ;incstack = 0
  1651  007E1A  6A06               	clrf	Check_Data_Sent_TX_Mode_nRF24L01@i,c
  1652  007E1C  6A07               	clrf	Check_Data_Sent_TX_Mode_nRF24L01@i+1,c
  1653  007E1E  6A08               	clrf	Check_Data_Sent_TX_Mode_nRF24L01@j,c
  1654                           
  1655                           ;nRF24l01.c: 374: while(PORTBbits.RB2)
  1656  007E20  D00E               	goto	l124
  1657  007E22                     l979:
  1658                           
  1659                           ;nRF24l01.c: 375: {
  1660                           ;nRF24l01.c: 376: i++;
  1661  007E22  4A06               	infsnz	Check_Data_Sent_TX_Mode_nRF24L01@i,f,c
  1662  007E24  2A07               	incf	Check_Data_Sent_TX_Mode_nRF24L01@i+1,f,c
  1663                           
  1664                           ;nRF24l01.c: 377: if(i==333)
  1665  007E26  0E4D               	movlw	77
  1666  007E28  1806               	xorwf	Check_Data_Sent_TX_Mode_nRF24L01@i,w,c
  1667  007E2A  E105               	bnz	l987
  1668  007E2C  0407               	decf	Check_Data_Sent_TX_Mode_nRF24L01@i+1,w,c
  1669  007E2E  E103               	bnz	l987
  1670                           
  1671                           ;nRF24l01.c: 378: {
  1672                           ;nRF24l01.c: 379: i=0; j++;
  1673  007E30  6A06               	clrf	Check_Data_Sent_TX_Mode_nRF24L01@i,c
  1674  007E32  6A07               	clrf	Check_Data_Sent_TX_Mode_nRF24L01@i+1,c
  1675  007E34  2A08               	incf	Check_Data_Sent_TX_Mode_nRF24L01@j,f,c
  1676  007E36                     l987:
  1677                           
  1678                           ;nRF24l01.c: 380: }
  1679                           ;nRF24l01.c: 381: if(j==7)
  1680  007E36  0E07               	movlw	7
  1681  007E38  1808               	xorwf	Check_Data_Sent_TX_Mode_nRF24L01@j,w,c
  1682  007E3A  E101               	bnz	l124
  1683                           
  1684                           ;nRF24l01.c: 384: break;
  1685  007E3C  D017               	goto	l1007
  1686  007E3E                     l124:
  1687  007E3E  B481               	btfsc	3969,2,c	;volatile
  1688  007E40  D7F0               	goto	l979
  1689  007E42  D014               	goto	l1007
  1690  007E44                     l991:
  1691                           
  1692                           ;nRF24l01.c: 388: {
  1693                           ;nRF24l01.c: 389: nRF24L01_Status=Read_nRF24L01_Status();
  1694  007E44  EC20  F03E         	call	_Read_nRF24L01_Status	;wreg free
  1695  007E48  6E09               	movwf	Check_Data_Sent_TX_Mode_nRF24L01@nRF24L01_Status,c
  1696                           
  1697                           ;nRF24l01.c: 391: if(nRF24L01_Status & 0b00010000)
  1698  007E4A  A809               	btfss	Check_Data_Sent_TX_Mode_nRF24L01@nRF24L01_Status,4,c
  1699  007E4C  D007               	goto	l131
  1700  007E4E  0E08               	movlw	8
  1701  007E50  EC3A  F03E         	call	_Read_nRF24L01_Register
  1702                           
  1703                           ;nRF24l01.c: 397: Write_nRF24L01_Status(0b00010000);
  1704  007E54  0E10               	movlw	16
  1705  007E56  EC30  F03E         	call	_Write_nRF24L01_Status
  1706                           
  1707                           ;nRF24l01.c: 399: }
  1708  007E5A  D008               	goto	l1007
  1709  007E5C                     l131:
  1710                           
  1711                           ;nRF24l01.c: 400: else if(nRF24L01_Status & 0b00100000)
  1712  007E5C  AA09               	btfss	Check_Data_Sent_TX_Mode_nRF24L01@nRF24L01_Status,5,c
  1713  007E5E  D006               	goto	l1007
  1714  007E60  0E08               	movlw	8
  1715  007E62  EC3A  F03E         	call	_Read_nRF24L01_Register
  1716                           
  1717                           ;nRF24l01.c: 406: Write_nRF24L01_Status(0b00100000);
  1718  007E66  0E20               	movlw	32
  1719  007E68  EC30  F03E         	call	_Write_nRF24L01_Status
  1720  007E6C                     l1007:
  1721  007E6C  B481               	btfsc	3969,2,c	;volatile
  1722  007E6E  0012               	return		;funcret
  1723  007E70  D7E9               	goto	l991
  1724  007E72                     __end_of_Check_Data_Sent_TX_Mode_nRF24L01:
  1725                           	opt stack 0
  1726                           tblptru	equ	0xFF8
  1727                           tblptrh	equ	0xFF7
  1728                           tblptrl	equ	0xFF6
  1729                           tablat	equ	0xFF5
  1730                           prodl	equ	0xFF3
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           postinc1	equ	0xFE6
  1734                           postdec1	equ	0xFE5
  1735                           plusw1	equ	0xFE3
  1736                           fsr1h	equ	0xFE2
  1737                           fsr1l	equ	0xFE1
  1738                           indf2	equ	0xFDF
  1739                           postinc2	equ	0xFDE
  1740                           plusw2	equ	0xFDB
  1741                           fsr2h	equ	0xFDA
  1742                           fsr2l	equ	0xFD9
  1743                           
  1744 ;; *************** function _Write_nRF24L01_Status *****************
  1745 ;; Defined at:
  1746 ;;		line 91 in file "nRF24l01.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  Register_Con    1    wreg     unsigned char 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  Register_Con    1    1[COMRAM] unsigned char 
  1751 ;;  nRF24L01_Sta    1    0        unsigned char 
  1752 ;;  dummydata       1    0        unsigned char 
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  1    wreg      void 
  1755 ;; Registers used:
  1756 ;;		wreg, status,2, cstack
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1762 ;;      Params:         0       0       0       0       0       0       0       0       0
  1763 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1765 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1766 ;;Total ram usage:        1 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    1
  1769 ;; This function calls:
  1770 ;;		_SPI_Transfer
  1771 ;; This function is called by:
  1772 ;;		_Reset_nRF24L01_Status_and_nRF24L01_Payloads
  1773 ;;		_Check_Data_Sent_TX_Mode_nRF24L01
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           	psect	text11
  1778  007C60                     __ptext11:
  1779                           	opt stack 0
  1780  007C60                     _Write_nRF24L01_Status:
  1781                           	opt stack 27
  1782                           
  1783                           ;incstack = 0
  1784                           ;Write_nRF24L01_Status@Register_Content stored from wreg
  1785  007C60  6E02               	movwf	Write_nRF24L01_Status@Register_Content,c
  1786                           
  1787                           ;nRF24l01.c: 93: unsigned char dummydata, nRF24L01_Status;
  1788                           ;nRF24l01.c: 95: LATAbits.LATA3=0;
  1789  007C62  9689               	bcf	3977,3,c	;volatile
  1790                           
  1791                           ;nRF24l01.c: 96: nRF24L01_Status=SPI_Transfer(0b00100000+0x07);
  1792  007C64  0E27               	movlw	39
  1793  007C66  EC18  F03E         	call	_SPI_Transfer
  1794                           
  1795                           ;nRF24l01.c: 98: dummydata=SPI_Transfer(Register_Content);
  1796  007C6A  5002               	movf	Write_nRF24L01_Status@Register_Content,w,c
  1797  007C6C  EC18  F03E         	call	_SPI_Transfer
  1798                           
  1799                           ;nRF24l01.c: 100: LATAbits.LATA3=1;
  1800  007C70  8689               	bsf	3977,3,c	;volatile
  1801  007C72  0012               	return		;funcret
  1802  007C74                     __end_of_Write_nRF24L01_Status:
  1803                           	opt stack 0
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           prodl	equ	0xFF3
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postinc1	equ	0xFE6
  1812                           postdec1	equ	0xFE5
  1813                           plusw1	equ	0xFE3
  1814                           fsr1h	equ	0xFE2
  1815                           fsr1l	equ	0xFE1
  1816                           indf2	equ	0xFDF
  1817                           postinc2	equ	0xFDE
  1818                           plusw2	equ	0xFDB
  1819                           fsr2h	equ	0xFDA
  1820                           fsr2l	equ	0xFD9
  1821                           
  1822 ;; *************** function _Read_nRF24L01_Status *****************
  1823 ;; Defined at:
  1824 ;;		line 80 in file "nRF24l01.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;		None
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  nRF24L01_Sta    1    1[COMRAM] unsigned char 
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  1    wreg      unsigned char 
  1831 ;; Registers used:
  1832 ;;		wreg, status,2, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1838 ;;      Params:         0       0       0       0       0       0       0       0       0
  1839 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1840 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1841 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1842 ;;Total ram usage:        1 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    1
  1845 ;; This function calls:
  1846 ;;		_SPI_Transfer
  1847 ;; This function is called by:
  1848 ;;		_Check_Data_Sent_TX_Mode_nRF24L01
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text12
  1853  007C40                     __ptext12:
  1854                           	opt stack 0
  1855  007C40                     _Read_nRF24L01_Status:
  1856                           	opt stack 28
  1857                           
  1858                           ;nRF24l01.c: 82: unsigned char nRF24L01_Status;
  1859                           ;nRF24l01.c: 84: LATAbits.LATA3=0;
  1860                           
  1861                           ;incstack = 0
  1862  007C40  9689               	bcf	3977,3,c	;volatile
  1863                           
  1864                           ;nRF24l01.c: 85: nRF24L01_Status=SPI_Transfer(0b11111111);
  1865  007C42  0EFF               	movlw	255
  1866  007C44  EC18  F03E         	call	_SPI_Transfer
  1867  007C48  6E02               	movwf	Read_nRF24L01_Status@nRF24L01_Status,c
  1868                           
  1869                           ;nRF24l01.c: 86: LATAbits.LATA3=1;
  1870  007C4A  8689               	bsf	3977,3,c	;volatile
  1871                           
  1872                           ;nRF24l01.c: 88: return(nRF24L01_Status);
  1873  007C4C  5002               	movf	Read_nRF24L01_Status@nRF24L01_Status,w,c
  1874  007C4E  0012               	return		;funcret
  1875  007C50                     __end_of_Read_nRF24L01_Status:
  1876                           	opt stack 0
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           tblptrl	equ	0xFF6
  1880                           tablat	equ	0xFF5
  1881                           prodl	equ	0xFF3
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           postinc1	equ	0xFE6
  1885                           postdec1	equ	0xFE5
  1886                           plusw1	equ	0xFE3
  1887                           fsr1h	equ	0xFE2
  1888                           fsr1l	equ	0xFE1
  1889                           indf2	equ	0xFDF
  1890                           postinc2	equ	0xFDE
  1891                           plusw2	equ	0xFDB
  1892                           fsr2h	equ	0xFDA
  1893                           fsr2l	equ	0xFD9
  1894                           
  1895 ;; *************** function _Read_nRF24L01_Register *****************
  1896 ;; Defined at:
  1897 ;;		line 48 in file "nRF24l01.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  Register_Add    1    wreg     unsigned char 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  Register_Add    1    1[COMRAM] unsigned char 
  1902 ;;  Register_Con    1    2[COMRAM] unsigned char 
  1903 ;;  nRF24L01_Sta    1    0        unsigned char 
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      unsigned char 
  1906 ;; Registers used:
  1907 ;;		wreg, status,2, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1913 ;;      Params:         0       0       0       0       0       0       0       0       0
  1914 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1915 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1916 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1917 ;;Total ram usage:        2 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    1
  1920 ;; This function calls:
  1921 ;;		_SPI_Transfer
  1922 ;; This function is called by:
  1923 ;;		_Write_nRF24L01_Register
  1924 ;;		_Check_Data_Sent_TX_Mode_nRF24L01
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text13
  1929  007C74                     __ptext13:
  1930                           	opt stack 0
  1931  007C74                     _Read_nRF24L01_Register:
  1932                           	opt stack 27
  1933                           
  1934                           ;incstack = 0
  1935                           ;Read_nRF24L01_Register@Register_Address stored from wreg
  1936  007C74  6E02               	movwf	Read_nRF24L01_Register@Register_Address,c
  1937                           
  1938                           ;nRF24l01.c: 50: unsigned char Register_Content, nRF24L01_Status;
  1939                           ;nRF24l01.c: 52: LATAbits.LATA3=0;
  1940  007C76  9689               	bcf	3977,3,c	;volatile
  1941                           
  1942                           ;nRF24l01.c: 53: nRF24L01_Status=SPI_Transfer(0b00000000+Register_Address);
  1943  007C78  5002               	movf	Read_nRF24L01_Register@Register_Address,w,c
  1944  007C7A  EC18  F03E         	call	_SPI_Transfer
  1945                           
  1946                           ;nRF24l01.c: 55: Register_Content=SPI_Transfer(0x00);
  1947  007C7E  0E00               	movlw	0
  1948  007C80  EC18  F03E         	call	_SPI_Transfer
  1949  007C84  6E03               	movwf	Read_nRF24L01_Register@Register_Content,c
  1950                           
  1951                           ;nRF24l01.c: 57: LATAbits.LATA3=1;
  1952  007C86  8689               	bsf	3977,3,c	;volatile
  1953                           
  1954                           ;nRF24l01.c: 58: return(Register_Content);
  1955  007C88  5003               	movf	Read_nRF24L01_Register@Register_Content,w,c
  1956  007C8A  0012               	return		;funcret
  1957  007C8C                     __end_of_Read_nRF24L01_Register:
  1958                           	opt stack 0
  1959                           tblptru	equ	0xFF8
  1960                           tblptrh	equ	0xFF7
  1961                           tblptrl	equ	0xFF6
  1962                           tablat	equ	0xFF5
  1963                           prodl	equ	0xFF3
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postinc1	equ	0xFE6
  1967                           postdec1	equ	0xFE5
  1968                           plusw1	equ	0xFE3
  1969                           fsr1h	equ	0xFE2
  1970                           fsr1l	equ	0xFE1
  1971                           indf2	equ	0xFDF
  1972                           postinc2	equ	0xFDE
  1973                           plusw2	equ	0xFDB
  1974                           fsr2h	equ	0xFDA
  1975                           fsr2l	equ	0xFD9
  1976                           
  1977 ;; *************** function _SPI_Transfer *****************
  1978 ;; Defined at:
  1979 ;;		line 38 in file "nRF24l01.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  byte_to_send    1    wreg     unsigned char 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;  byte_to_send    1    0[COMRAM] unsigned char 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      unsigned char 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1993 ;;      Params:         0       0       0       0       0       0       0       0       0
  1994 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1995 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1996 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1997 ;;Total ram usage:        1 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_Read_nRF24L01_Register
  2003 ;;		_Write_nRF24L01_Register
  2004 ;;		_Read_nRF24L01_Status
  2005 ;;		_Write_nRF24L01_Status
  2006 ;;		_Read_nRF24L01_Address_Register
  2007 ;;		_Write_nRF24L01_Address_Register
  2008 ;;		_Write_nRF24L01_TX_Payload
  2009 ;;		_Reset_nRF24L01_Status_and_nRF24L01_Payloads
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text14
  2014  007C30                     __ptext14:
  2015                           	opt stack 0
  2016  007C30                     _SPI_Transfer:
  2017                           	opt stack 28
  2018                           
  2019                           ;incstack = 0
  2020                           ;SPI_Transfer@byte_to_send stored from wreg
  2021  007C30  6E01               	movwf	SPI_Transfer@byte_to_send,c
  2022                           
  2023                           ;nRF24l01.c: 40: SSPBUF = byte_to_send;
  2024  007C32  C001  FFC9         	movff	SPI_Transfer@byte_to_send,4041	;volatile
  2025  007C36                     l37:
  2026  007C36  A69E               	btfss	3998,3,c	;volatile
  2027  007C38  D7FE               	goto	l37
  2028                           
  2029                           ;nRF24l01.c: 43: PIR1bits.SSPIF=0;
  2030  007C3A  969E               	bcf	3998,3,c	;volatile
  2031                           
  2032                           ;nRF24l01.c: 45: return(SSPBUF);
  2033  007C3C  50C9               	movf	4041,w,c	;volatile
  2034  007C3E  0012               	return		;funcret
  2035  007C40                     __end_of_SPI_Transfer:
  2036                           	opt stack 0
  2037  0000                     tblptru	equ	0xFF8
  2038                           tblptrh	equ	0xFF7
  2039                           tblptrl	equ	0xFF6
  2040                           tablat	equ	0xFF5
  2041                           prodl	equ	0xFF3
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           postinc1	equ	0xFE6
  2045                           postdec1	equ	0xFE5
  2046                           plusw1	equ	0xFE3
  2047                           fsr1h	equ	0xFE2
  2048                           fsr1l	equ	0xFE1
  2049                           indf2	equ	0xFDF
  2050                           postinc2	equ	0xFDE
  2051                           plusw2	equ	0xFDB
  2052                           fsr2h	equ	0xFDA
  2053                           fsr2l	equ	0xFD9
  2054                           tblptru	equ	0xFF8
  2055                           tblptrh	equ	0xFF7
  2056                           tblptrl	equ	0xFF6
  2057                           tablat	equ	0xFF5
  2058                           prodl	equ	0xFF3
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postinc1	equ	0xFE6
  2062                           postdec1	equ	0xFE5
  2063                           plusw1	equ	0xFE3
  2064                           fsr1h	equ	0xFE2
  2065                           fsr1l	equ	0xFE1
  2066                           indf2	equ	0xFDF
  2067                           postinc2	equ	0xFDE
  2068                           plusw2	equ	0xFDB
  2069                           fsr2h	equ	0xFDA
  2070                           fsr2l	equ	0xFD9
  2071                           
  2072                           	psect	rparam
  2073  0000                     tblptru	equ	0xFF8
  2074                           tblptrh	equ	0xFF7
  2075                           tblptrl	equ	0xFF6
  2076                           tablat	equ	0xFF5
  2077                           prodl	equ	0xFF3
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           postinc1	equ	0xFE6
  2081                           postdec1	equ	0xFE5
  2082                           plusw1	equ	0xFE3
  2083                           fsr1h	equ	0xFE2
  2084                           fsr1l	equ	0xFE1
  2085                           indf2	equ	0xFDF
  2086                           postinc2	equ	0xFDE
  2087                           plusw2	equ	0xFDB
  2088                           fsr2h	equ	0xFDA
  2089                           fsr2l	equ	0xFD9
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodl	equ	0xFF3
  2095                           postinc0	equ	0xFEE
  2096                           wreg	equ	0xFE8
  2097                           postinc1	equ	0xFE6
  2098                           postdec1	equ	0xFE5
  2099                           plusw1	equ	0xFE3
  2100                           fsr1h	equ	0xFE2
  2101                           fsr1l	equ	0xFE1
  2102                           indf2	equ	0xFDF
  2103                           postinc2	equ	0xFDE
  2104                           plusw2	equ	0xFDB
  2105                           fsr2h	equ	0xFDA
  2106                           fsr2l	equ	0xFD9


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      44
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Send_Data_TX_Mode_nRF24L01@TX_Payload	PTR unsigned char  size(1) Largest target is 1
		 -> main@mensaje(COMRAM[1]), 

    Send_Data_TX_Mode_nRF24L01@TX_Address	PTR unsigned char  size(1) Largest target is 5
		 -> main@direccion_tx(COMRAM[5]), 

    Write_nRF24L01_TX_Payload@TX_Payload	PTR unsigned char  size(1) Largest target is 1
		 -> main@mensaje(COMRAM[1]), 

    Write_nRF24L01_Address_Register@Register_Content	PTR unsigned char  size(1) Largest target is 5
		 -> main@direccion_tx(COMRAM[5]), 

    Read_nRF24L01_Address_Register@Register_Content	PTR unsigned char  size(1) Largest target is 5
		 -> Write_nRF24L01_Address_Register@Address_Verification(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_Send_Data_TX_Mode_nRF24L01
    _Start_TX_Mode_nRF24L01->_Write_nRF24L01_Register
    _Write_nRF24L01_Register->_Read_nRF24L01_Register
    _Reset_nRF24L01_Status_and_nRF24L01_Payloads->_Write_nRF24L01_Status
    _Send_Data_TX_Mode_nRF24L01->_Write_nRF24L01_Address_Register
    _Write_nRF24L01_TX_Payload->_SPI_Transfer
    _Write_nRF24L01_Address_Register->_Read_nRF24L01_Address_Register
    _Read_nRF24L01_Address_Register->_SPI_Transfer
    _Check_Data_Sent_TX_Mode_nRF24L01->_Read_nRF24L01_Register
    _Write_nRF24L01_Status->_SPI_Transfer
    _Read_nRF24L01_Status->_SPI_Transfer
    _Read_nRF24L01_Register->_SPI_Transfer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    4592
                                             30 COMRAM     9     9      0
   _Check_Data_Sent_TX_Mode_nRF24L01
                          _SPI_Start
         _Send_Data_TX_Mode_nRF24L01
             _Start_TX_Mode_nRF24L01
               _nRF24L01_Ports_Start
 ---------------------------------------------------------------------------------
 (1) _nRF24L01_Ports_Start                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Start_TX_Mode_nRF24L01                              11     2      9    2412
                                              5 COMRAM    11     2      9
_Reset_nRF24L01_Status_and_nRF24L01_
            _Write_nRF24L01_Register
 ---------------------------------------------------------------------------------
 (2) _Write_nRF24L01_Register                              4     3      1    1571
                                              3 COMRAM     2     1      1
             _Read_nRF24L01_Register
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (2) _Reset_nRF24L01_Status_and_nRF24L01_Payloads          1     1      0      45
                       _SPI_Transfer
              _Write_nRF24L01_Status
 ---------------------------------------------------------------------------------
 (1) _Send_Data_TX_Mode_nRF24L01                           5     1      4    1915
                                             25 COMRAM     5     1      4
    _Write_nRF24L01_Address_Register
          _Write_nRF24L01_TX_Payload
 ---------------------------------------------------------------------------------
 (2) _Write_nRF24L01_TX_Payload                            7     5      2     435
                                              1 COMRAM     5     3      2
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (2) _Write_nRF24L01_Address_Register                     17    15      2    1070
                                             10 COMRAM    15    13      2
     _Read_nRF24L01_Address_Register
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (3) _Read_nRF24L01_Address_Register                      10     8      2     255
                                              1 COMRAM     9     7      2
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (1) _SPI_Start                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Check_Data_Sent_TX_Mode_nRF24L01                     6     6      0     175
                                              3 COMRAM     6     6      0
             _Read_nRF24L01_Register
               _Read_nRF24L01_Status
              _Write_nRF24L01_Status
 ---------------------------------------------------------------------------------
 (3) _Write_nRF24L01_Status                                3     3      0      30
                                              1 COMRAM     1     1      0
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (2) _Read_nRF24L01_Status                                 1     1      0      30
                                              1 COMRAM     1     1      0
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (3) _Read_nRF24L01_Register                               3     3      0      45
                                              1 COMRAM     2     2      0
                       _SPI_Transfer
 ---------------------------------------------------------------------------------
 (3) _SPI_Transfer                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Check_Data_Sent_TX_Mode_nRF24L01
     _Read_nRF24L01_Register
       _SPI_Transfer
     _Read_nRF24L01_Status
       _SPI_Transfer
     _Write_nRF24L01_Status
       _SPI_Transfer
   _SPI_Start
   _Send_Data_TX_Mode_nRF24L01
     _Write_nRF24L01_Address_Register
       _Read_nRF24L01_Address_Register
         _SPI_Transfer
       _SPI_Transfer
     _Write_nRF24L01_TX_Payload
       _SPI_Transfer
   _Start_TX_Mode_nRF24L01
     _Reset_nRF24L01_Status_and_nRF24L01_Payloads
       _SPI_Transfer
       _Write_nRF24L01_Status
         _SPI_Transfer
     _Write_nRF24L01_Register
       _Read_nRF24L01_Register
         _SPI_Transfer
       _SPI_Transfer
   _nRF24L01_Ports_Start

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     27      2C       1       46.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2C      20        0.0%
DATA                 0      0      2C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu May 15 20:18:45 2025

                                                  PL2 7FDA  
                                                  PL4 7E0E  
                                                  PL6 7DBC  
                                                  PL8 7D28  
                                         _SSPSTATbits 000FC7  
                                                  l37 7C36  
                                                  l47 7D0E  
                                                  l65 7F7C  
                           _Write_nRF24L01_TX_Payload 7DC6  
                                                 l131 7E5C  
                                                 l124 7E3E  
                                                 l991 7E44  
                                                 l987 7E36  
                                                 l979 7E22  
                                                 u307 7EE0  
                                                 u317 7F6C  
                                                 u327 7CDE  
                                                 u337 7D9E  
                                                 u347 7DAE  
                                                 u291 7E7C  
                                                 u357 7DB6  
                                        _SPI_Transfer 7C30  
                                        __CFG_BOR$OFF 000000  
                                                 wreg 000FE8  
                                        __CFG_LVP$OFF 000000  
                                        __CFG_WDT$OFF 000000  
                                                l1101 7DE8  
                                                l1007 7E6C  
                                                l1111 7DFE  
                                                l1041 7D50  
                                                l1105 7DF2  
                                                l1115 7E0A  
                                                l1037 7D3E  
                                                l1055 7D1A  
                                                l1081 7FCE  
                                                l1065 7F8A  
                                                l1083 7FD0  
                                                l1077 7FB6  
                                                l1069 7F9A  
                                                l1085 7FD4  
                                                l1165 7EB4  
                                                l1095 7DD8  
                                                l1099 7DE0  
                                         main@mensaje 0027  
                                                _main 7E72  
                                                fsr1h 000FE2  
                                                fsr2h 000FDA  
                                                indf2 000FDF  
                                                fsr1l 000FE1  
                                                fsr2l 000FD9  
                                                prodl 000FF3  
                                                start 1000  
                                       __CFG_IESO$OFF 000000  
                                       __CFG_MCLRE$ON 000000  
                                        ___param_bank 000000  
                                       __CFG_PLLDIV$5 000000  
                                               ?_main 0001  
                                      __CFG_DEBUG$OFF 000000  
                                       __CFG_USBDIV$2 000000  
                                       __CFG_PWRT$OFF 000000  
  Write_nRF24L01_Address_Register@TX_RX_Address_Width 0018  
   Read_nRF24L01_Address_Register@TX_RX_Address_Width 0009  
                                      __CFG_FCMEN$OFF 000000  
                               _Write_nRF24L01_Status 7C60  
                                               tablat 000FF5  
                                               plusw1 000FE3  
                                               plusw2 000FDB  
                        __end_of_nRF24L01_Ports_Start 7C60  
                                               status 000FD8  
                                  __size_of_SPI_Start 0020  
                Send_Data_TX_Mode_nRF24L01@TX_Address 001B  
                                     __initialization 7CAC  
                                        __end_of_main 7EF0  
                Send_Data_TX_Mode_nRF24L01@TX_Payload 001D  
                                              ??_main 001F  
                                       __activetblptr 000000  
                                              _ADCON1 000FC1  
               Write_nRF24L01_Status@Register_Content 0002  
                    __size_of_Write_nRF24L01_Register 002A  
                                              _SSPBUF 000FC9  
                                      __CFG_VREGEN$ON 000000  
                    ??_Read_nRF24L01_Address_Register 0004  
                     ?_Read_nRF24L01_Address_Register 0002  
                                   __end_of_SPI_Start 7CAC  
                                        __pdataCOMRAM 0028  
                              ?_Write_nRF24L01_Status 0001  
                     Start_TX_Mode_nRF24L01@CRC_Setup 000A  
                                              tblptrh 000FF7  
                                              tblptrl 000FF6  
                                              tblptru 000FF8  
                  __size_of_Write_nRF24L01_TX_Payload 0048  
                            ??_Start_TX_Mode_nRF24L01 000F  
                        __end_of_Read_nRF24L01_Status 7C50  
                 Read_nRF24L01_Status@nRF24L01_Status 0002  
                                          __accesstop 0060  
                             __end_of__initialization 7CCC  
                                     __CFG_PBADEN$OFF 000000  
                                       ___rparam_used 000001  
     Check_Data_Sent_TX_Mode_nRF24L01@nRF24L01_Status 0009  
       Send_Data_TX_Mode_nRF24L01@TX_RX_Address_Width 001A  
           Start_TX_Mode_nRF24L01@TX_RX_Address_Width 0010  
                                      __pcstackCOMRAM 0001  
                                    main@direccion_tx 0021  
                                          __end_ofPL2 8000  
                                          __end_ofPL4 7E1A  
                                          __end_ofPL6 7DC6  
                                          __end_ofPL8 7D30  
 Write_nRF24L01_Address_Register@Address_Verification 0012  
                                _nRF24L01_Ports_Start 7C50  
                   __end_of_Write_nRF24L01_TX_Payload 7E0E  
                        ??_Send_Data_TX_Mode_nRF24L01 001E  
                               ?_nRF24L01_Ports_Start 0001  
                                             _SSPCON1 000FC6  
                     __size_of_Start_TX_Mode_nRF24L01 0086  
                             _Write_nRF24L01_Register 7CFE  
                                             __Hparam 0000  
                                             __Lparam 0000  
             Write_nRF24L01_Register@Register_Address 0005  
              Read_nRF24L01_Register@Register_Address 0002  
                            ??_Read_nRF24L01_Register 0002  
             Write_nRF24L01_Register@Register_Content 0004  
              Read_nRF24L01_Register@Register_Content 0003  
                                _Read_nRF24L01_Status 7C40  
                                             __pcinit 7CAC  
                                             __ramtop 0800  
                                             __ptext0 7E72  
                                             __ptext1 7C50  
                                             __ptext2 7EF0  
                                             __ptext3 7CFE  
                                             __ptext4 7CD2  
                                             __ptext5 7D7A  
                                             __ptext6 7DC6  
                                             __ptext7 7F76  
                                             __ptext8 7D30  
                                             __ptext9 7C8C  
                                end_of_initialization 7CCC  
                   Check_Data_Sent_TX_Mode_nRF24L01@i 0006  
                   Check_Data_Sent_TX_Mode_nRF24L01@j 0008  
        Write_nRF24L01_TX_Payload@TX_RX_Payload_Width 0002  
                                             postdec1 000FE5  
       Send_Data_TX_Mode_nRF24L01@TX_RX_Payload_Width 001C  
           Start_TX_Mode_nRF24L01@TX_RX_Payload_Width 000E  
                                             postinc0 000FEE  
                                             postinc1 000FE6  
                                             postinc2 000FDE  
                              _Start_TX_Mode_nRF24L01 7EF0  
                               ?_Read_nRF24L01_Status 0001  
                 Write_nRF24L01_TX_Payload@TX_Payload 0003  
                              ??_nRF24L01_Ports_Start 0001  
                             ??_Write_nRF24L01_Status 0002  
                                           _PORTBbits 000F81  
                                           _TRISAbits 000F92  
                                           _TRISBbits 000F93  
                                           _TRISCbits 000F94  
                           ??_Write_nRF24L01_Register 0005  
                                           _SPI_Start 7C8C  
                  __end_of_Send_Data_TX_Mode_nRF24L01 7DBC  
                          _Send_Data_TX_Mode_nRF24L01 7D7A  
              __end_of_Read_nRF24L01_Address_Register 7D7A  
             __size_of_Read_nRF24L01_Address_Register 004A  
                      _Read_nRF24L01_Address_Register 7D30  
                                          main@estado 0026  
                     __size_of_Read_nRF24L01_Register 0018  
                                       __pidataCOMRAM 7C2B  
                                       ?_SPI_Transfer 0001  
                                 start_initialization 7CAC  
                                          ?_SPI_Start 0001  
     Write_nRF24L01_Address_Register@Process_Finished 0017  
                     __end_of_Write_nRF24L01_Register 7D28  
               Start_TX_Mode_nRF24L01@RF_Output_Power 0008  
                              ??_Read_nRF24L01_Status 0002  
                                      ??_SPI_Transfer 0001  
                      Start_TX_Mode_nRF24L01@LNA_Gain 0009  
                              _Read_nRF24L01_Register 7C74  
                          ?_Write_nRF24L01_TX_Payload 0002  
                     Read_nRF24L01_Address_Register@i 000A  
         Start_TX_Mode_nRF24L01@Auto_Retransmit_Delay 000B  
                            SPI_Start@Clock_Frequency 0001  
                                         ??_SPI_Start 0001  
            __end_of_Check_Data_Sent_TX_Mode_nRF24L01 7E72  
           __size_of_Check_Data_Sent_TX_Mode_nRF24L01 0058  
                  ??_Check_Data_Sent_TX_Mode_nRF24L01 0004  
                   ?_Check_Data_Sent_TX_Mode_nRF24L01 0001  
                    _Check_Data_Sent_TX_Mode_nRF24L01 7E1A  
                                            _LATAbits 000F89  
                                            _IPR1bits 000F9F  
                                            _PIE1bits 000F9D  
                             ?_Start_TX_Mode_nRF24L01 0006  
                                            _PIR1bits 000F9E  
                                           main@F3898 0028  
                                          _ADCON0bits 000FC2  
                      __size_of_Write_nRF24L01_Status 0014  
                       __end_of_Write_nRF24L01_Status 7C74  
                                           copy_data0 7CC0  
                         ?_Send_Data_TX_Mode_nRF24L01 001A  
           Start_TX_Mode_nRF24L01@Max_Auto_Retransmit 000C  
                                __end_of_SPI_Transfer 7C40  
             Start_TX_Mode_nRF24L01@Frequency_Channel 0006  
                      __end_of_Start_TX_Mode_nRF24L01 7F76  
                                            __Hrparam 0000  
                                            __Lrparam 0000  
           Send_Data_TX_Mode_nRF24L01@Enable_Checksum 001E  
               Start_TX_Mode_nRF24L01@Enable_Checksum 000D  
                       __size_of_nRF24L01_Ports_Start 0010  
 __end_of_Reset_nRF24L01_Status_and_nRF24L01_Payloads 7CFE  
__size_of_Reset_nRF24L01_Status_and_nRF24L01_Payloads 002C  
       ??_Reset_nRF24L01_Status_and_nRF24L01_Payloads 0003  
        ?_Reset_nRF24L01_Status_and_nRF24L01_Payloads 0001  
         _Reset_nRF24L01_Status_and_nRF24L01_Payloads 7CD2  
                                            __ptext10 7E1A  
                                            __ptext11 7C60  
                                            __ptext12 7C40  
                                            __ptext13 7C74  
                                            __ptext14 7C30  
                            SPI_Transfer@byte_to_send 0001  
                                       __size_of_main 007E  
                               __CFG_CPUDIV$OSC1_PLL2 000000  
                            ?_Write_nRF24L01_Register 0004  
                             ?_Read_nRF24L01_Register 0001  
                    Write_nRF24L01_Address_Register@i 0019  
                  Start_TX_Mode_nRF24L01@RF_Data_Rate 0007  
            Write_nRF24L01_TX_Payload@Enable_Checksum 0005  
                         ??_Write_nRF24L01_TX_Payload 0004  
                Write_nRF24L01_TX_Payload@TX_Checksum 0004  
             __end_of_Write_nRF24L01_Address_Register 7FDA  
            __size_of_Write_nRF24L01_Address_Register 0064  
                   ??_Write_nRF24L01_Address_Register 000D  
                    ?_Write_nRF24L01_Address_Register 000B  
                     _Write_nRF24L01_Address_Register 7F76  
     Write_nRF24L01_Address_Register@Register_Address 000B  
      Read_nRF24L01_Address_Register@Register_Address 0002  
                       __size_of_Read_nRF24L01_Status 0010  
     Write_nRF24L01_Address_Register@Register_Content 000C  
      Read_nRF24L01_Address_Register@Register_Content 0003  
                      __end_of_Read_nRF24L01_Register 7C8C  
                 __size_of_Send_Data_TX_Mode_nRF24L01 0042  
                                         _SSPCON1bits 000FC6  
                               __size_of_SPI_Transfer 0010  
                                  __CFG_FOSC$HSPLL_HS 000000  
                          Write_nRF24L01_TX_Payload@i 0006  
